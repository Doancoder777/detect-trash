/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 21.09.2025 19:03:12

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242608;
#else
constexpr int kTensorArenaSize = 241584;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039163092151284218, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[6] = { 23809, -34877, -41085, -36816, -40160, -40349, };
const TfArray<1, int> tensor_dimension2 = { 1, { 6 } };
const TfArray<6, float> quant2_scale = { 6, { 0.00021652999566867948, 0.00018627892131917179, 0.00016138507635332644, 0.00017594012024346739, 0.00016164228145498782, 0.00016350056102965027, } };
const TfArray<6, int> quant2_zero = { 6, { 0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[6*1*1*32] = { 
  /* [0][0][][] */ 65,56,-68,-52,-35,9,50,43,-28,110,-35,97,-82,-2,3,5,-7,-18,4,-42,-23,4,22,-66,-99,-6,-39,-8,127,1,-38,-63, 
  /* [1][0][][] */ 56,-59,-4,-12,100,-6,-127,35,78,-37,-104,64,22,2,-78,5,2,-57,-62,-82,-22,43,7,-73,78,51,106,-4,-56,27,-41,102, 
  /* [2][0][][] */ -50,-94,81,-69,62,122,-127,80,-79,-20,67,-99,87,-33,27,72,39,-5,-109,-55,80,112,-109,18,-127,81,-88,-41,-31,48,-62,-117, 
  /* [3][0][][] */ 69,-68,10,38,33,-39,-127,32,69,80,-33,-96,102,3,-40,-14,83,25,88,-80,40,-57,-117,59,-41,104,-98,9,-37,-19,55,91, 
  /* [4][0][][] */ -29,25,124,-5,-38,-68,53,-43,-35,-98,26,49,27,-26,-79,-19,17,7,99,10,10,127,86,-25,72,8,3,38,-117,-74,39,31, 
  /* [5][0][][] */ 75,76,-37,109,44,2,-108,110,-45,-115,95,-124,-45,-111,-127,-16,-73,-99,-37,105,-19,2,26,37,120,-12,-26,74,27,61,-75,-14, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 6,1,1,32 } };
const TfArray<6, float> quant3_scale = { 6, { 0.0045992350205779076, 0.0039566829800605774, 0.0034279217943549156, 0.0037370801437646151, 0.00343338493257761, 0.0034728562459349632, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 391, 371, 194, 209, 157, -111, 1262, 138, -433, 1212, 1, 1483, -37, 171, 1526, -721, 65, 239, 654, -80, 79, 342, 694, -238, 276, 111, -319, 350, 2602, -316, -136, 212, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.2176335884723812e-05, 4.7276338591473177e-05, 5.9006710216635838e-05, 5.0172100600320846e-05, 5.0452028517611325e-05, 4.4863554649055004e-05, 5.8556561270961538e-05, 4.3611129513010383e-05, 4.8787300329422578e-05, 5.0743808969855309e-05, 5.0182472477899864e-05, 5.3151186875766143e-05, 5.6685810704948381e-05, 4.6707176807103679e-05, 5.1492501370375976e-05, 4.4110605813330039e-05, 4.7258989070542157e-05, 4.3951280531473458e-05, 4.3919124436797574e-05, 4.2428291635587811e-05, 5.4416610510088503e-05, 4.7765028284629807e-05, 4.3923100747633725e-05, 4.6150387788657099e-05, 4.8528989282203838e-05, 4.5759901695419103e-05, 4.776328569278121e-05, 4.5446766307577491e-05, 5.0710976211121306e-05, 4.2961786675732583e-05, 4.3579992052400485e-05, 5.5404401791747659e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -21,-36,86,19,83,3,-64,-92,66,-78,-83,-1,56,15,-18,50,-35,-18,-60,-46,-53,-77,8,95,-127,9,73,-32,89,3,-14,-54,75,-41,-69,49,-101,-72,-88,36,77,-68,-104,93,54,-89,94,-27,21,-54,-46,63,-61,-30,-81,98,0,66,78,-82,-55,81,-34,47,-2,22,54,87,57,92,78,-84,92,-92,43,74,-82,-9,-47,22,47,10,46,-45,-41,-41,-70,68,1,71,-6,-83,1,58,1,24, 
  /* [1][0][][] */ -41,33,-67,12,-34,62,32,-3,81,-71,-98,95,61,-9,30,52,109,-42,46,115,-26,6,32,27,31,48,-40,97,39,0,92,-69,74,97,14,44,38,63,-17,-71,-64,12,-34,-99,-41,51,-13,-46,-24,-48,109,47,6,85,-60,-32,51,82,39,70,-65,97,-57,-73,-52,32,73,40,101,33,30,5,-105,81,-51,47,79,-19,-37,80,-74,111,-43,-120,33,127,-46,-72,81,83,106,13,98,93,25,19, 
  /* [2][0][][] */ 6,44,-35,63,-7,-79,48,87,-69,49,-19,88,73,-32,70,-67,-69,-17,11,48,-61,-14,90,23,-5,41,90,21,-42,74,55,42,-49,-19,-68,-70,-43,70,92,-31,-127,-60,25,9,-87,79,-20,-38,65,-17,80,-38,-24,57,0,-18,-52,80,-32,8,5,43,-12,51,79,39,48,70,-62,47,1,-44,35,-48,36,27,-30,-14,20,24,37,-122,7,-14,9,-63,-18,-6,76,102,-13,8,-40,-52,-34,-64, 
  /* [3][0][][] */ 76,11,47,-7,-58,56,-100,46,74,18,63,22,93,96,81,14,106,93,-73,15,119,-59,-51,-88,-37,-99,-55,103,52,-70,75,18,-36,-19,0,-7,-74,-28,44,51,-30,-91,-101,10,74,35,-25,-66,66,-95,26,2,85,42,50,-72,-127,-90,-116,-40,-72,45,-27,62,55,-17,-41,-16,-12,-42,19,94,30,-94,58,-37,40,82,98,-41,-67,-110,21,62,37,49,-27,-92,-85,16,13,-81,69,-60,-96,10, 
  /* [4][0][][] */ 55,93,-12,46,-14,-8,40,17,56,85,-2,44,35,-31,-2,-47,-13,8,-67,17,83,-69,81,33,-50,-2,64,-42,-51,35,-52,-31,65,108,20,-96,-44,-21,-105,55,-26,-48,-60,-64,43,90,31,31,33,-49,-25,-76,-69,45,-74,29,5,-67,22,21,14,-50,-30,-44,-36,57,-1,-20,28,-76,-79,-62,-34,9,96,46,59,-34,-6,-59,2,-56,-94,-53,9,53,76,-9,-127,-86,25,51,12,79,-103,-34, 
  /* [5][0][][] */ 77,-99,90,85,47,-122,24,66,71,-127,14,-55,3,69,16,39,42,40,-94,87,13,27,33,-35,-89,-83,-23,-101,45,30,36,-110,-60,-15,-91,5,-99,-24,59,5,-86,-39,60,85,-51,19,11,-52,-123,79,42,60,55,-6,44,-50,110,40,-30,-41,51,-79,5,-56,-19,81,-35,8,53,-5,74,-55,-65,86,-31,-54,-8,-57,8,66,118,38,41,127,-94,57,12,45,75,-87,87,94,-23,8,91,-81, 
  /* [6][0][][] */ 33,-36,88,79,-49,-25,29,48,5,-31,25,-57,72,83,90,-76,35,16,46,99,-37,-59,90,41,-21,-2,-22,-45,2,-88,47,-37,-32,-64,1,-54,-16,53,-71,59,99,64,13,-14,-85,127,-53,-23,-55,85,-19,-51,52,2,91,5,37,-5,-51,97,-80,8,96,-36,-39,58,88,-1,81,10,-53,11,56,-37,-56,-7,-59,-58,-34,-12,34,34,42,-23,-35,-18,-13,-68,81,77,112,13,-8,-50,57,13, 
  /* [7][0][][] */ 126,71,-28,-43,-66,125,-14,8,123,7,-87,17,62,-84,53,81,64,24,-27,112,48,42,2,94,-99,93,50,60,-76,110,-9,47,29,32,72,88,-111,90,-3,-16,96,-74,100,76,62,1,106,-127,61,-73,-117,-85,-15,89,16,40,101,-79,17,-48,17,4,60,-102,-65,-48,65,28,-102,17,70,91,90,33,66,63,-57,36,-97,37,98,-46,-20,-57,92,29,-99,96,73,-22,72,76,-67,-43,9,-72, 
  /* [8][0][][] */ 12,22,-52,-84,48,40,-53,-31,1,30,27,88,10,-51,-79,-70,-63,93,-61,2,8,-29,60,95,-127,76,36,66,-82,8,-88,118,78,-20,29,-23,87,-8,-32,77,92,80,-112,-93,5,-41,-37,76,28,-85,-78,-25,-70,-9,-32,-88,18,106,-96,99,100,51,40,96,-45,-35,-34,95,-74,46,18,2,76,51,10,8,-45,79,56,47,18,53,-116,-91,15,17,51,-53,17,-56,-89,103,-83,-103,-54,45, 
  /* [9][0][][] */ 7,5,95,50,68,-81,-31,-123,35,58,10,25,-20,-51,-79,-14,14,3,-55,-35,33,93,-75,-99,124,19,-16,27,9,-52,-49,91,53,11,43,-13,-84,33,-19,-45,48,29,43,-88,68,23,-80,54,39,12,-67,-57,75,-70,-40,94,79,-56,-12,-12,-89,82,97,-56,-55,10,88,46,-16,86,105,-55,5,79,-85,-54,-72,-89,-5,94,37,31,116,-5,-34,-66,40,-24,127,61,-7,78,94,-3,117,-4, 
  /* [10][0][][] */ -47,84,96,-60,-13,84,68,43,56,19,30,-44,89,74,-12,20,-13,58,-127,-51,5,31,55,-51,35,28,-82,-88,-24,89,-73,-84,78,81,106,65,-15,10,-10,13,-54,93,-77,-36,-96,-39,12,-32,-12,-30,51,43,67,34,-60,-35,-89,-17,40,-35,15,62,89,34,114,-61,-68,-25,27,-23,-75,-54,74,67,-66,104,-2,58,77,36,79,-10,68,112,-78,73,97,5,40,28,-1,-57,-56,-22,-24,-69, 
  /* [11][0][][] */ 92,17,-5,112,121,29,76,32,70,99,-19,100,0,-57,26,-43,-60,-69,83,74,35,72,48,-83,-59,-43,-27,63,85,-8,41,-12,-49,-51,67,53,-42,108,-8,-44,4,127,-48,7,-37,-17,-71,-58,76,127,109,57,-45,-74,44,31,-28,-35,-17,-55,-76,69,84,37,37,72,-30,37,77,60,-55,-29,42,120,-68,72,-59,59,-28,81,-64,10,-32,-23,41,-44,32,-35,-25,26,22,-78,-42,-29,-28,31, 
  /* [12][0][][] */ -13,60,-27,-2,67,10,-33,44,-45,4,-5,20,-31,-15,45,-47,-81,-31,-57,-60,26,-13,16,71,-53,-75,89,-66,62,25,-28,89,-90,-61,-48,8,18,-55,1,38,76,23,-69,-19,-17,-89,-50,108,-48,-127,-51,100,37,5,-76,43,-41,-37,56,56,60,93,3,42,94,25,-25,89,50,76,14,62,70,96,-2,1,-26,11,-74,-55,-33,45,46,29,-24,-4,37,106,-63,-66,63,42,58,-3,26,43, 
  /* [13][0][][] */ 99,-60,99,98,88,102,78,69,60,-86,12,-24,81,67,57,-43,-115,-68,-54,27,63,-25,108,-47,-40,47,0,13,-80,-83,78,32,38,93,-20,38,-77,-11,39,61,-38,77,-47,9,-43,24,-7,-19,28,102,-31,-73,-86,18,102,-77,-27,24,-17,-72,-25,106,-38,17,-51,-62,-82,78,-37,-11,89,2,-85,46,-69,-16,-103,76,73,-57,52,-87,102,28,-78,-99,87,127,14,-27,-66,48,113,-53,70,12, 
  /* [14][0][][] */ -30,-92,107,93,81,5,1,-84,-57,-21,90,84,-21,-19,-68,-55,-4,-57,21,46,-7,45,29,56,-90,-40,-8,22,-71,-86,-29,52,97,-9,-6,22,91,127,56,-92,6,-62,54,82,70,-55,67,-61,93,105,90,71,107,-16,22,26,-14,15,69,102,20,-58,-27,82,-51,-7,76,-88,-49,-62,-42,103,0,92,55,-27,61,-73,65,41,68,69,-82,-1,-85,-54,-57,120,115,23,101,-30,90,90,32,84, 
  /* [15][0][][] */ 8,-36,-33,54,75,-93,45,-98,49,-14,-76,-8,94,-8,-98,-118,78,1,-101,8,35,8,68,95,87,50,28,81,7,43,59,-107,-8,-2,-72,-19,-76,110,107,-73,-2,110,-45,-33,16,-83,-52,-88,-15,-90,-17,18,-92,-110,-68,-17,49,41,-37,98,-50,-74,-12,101,-47,85,-81,-7,-69,-25,52,-78,6,-11,45,-109,-12,39,92,65,-87,35,-114,-60,-127,-44,-91,32,81,65,-120,-52,36,98,-97,106, 
  /* [16][0][][] */ -81,-8,110,-51,29,104,-60,56,44,13,-87,63,-21,-56,-45,-38,87,52,70,56,109,66,-45,28,-21,21,-65,55,-112,31,31,11,-116,56,32,57,-8,50,-27,-65,14,-47,78,94,44,74,77,10,-76,-118,18,118,-28,97,50,25,11,82,74,7,127,103,50,56,61,1,-19,79,56,91,-39,2,18,90,70,88,-23,71,-84,-7,27,-97,54,20,2,68,74,29,79,25,-15,98,52,-24,-73,15, 
  /* [17][0][][] */ 40,-98,27,75,-34,-127,-58,-96,45,-74,88,45,102,72,-114,57,27,59,127,109,-91,-3,16,-46,68,82,-81,35,110,-60,-35,69,-21,-15,36,15,-56,89,-88,-36,-90,-13,-16,-8,0,19,94,-93,85,113,-16,41,-30,72,99,-72,-78,81,-73,-107,28,-101,73,84,-92,-68,49,-92,-110,-9,115,9,22,-126,-61,57,120,-55,38,-42,5,-19,-106,-98,-101,78,79,-33,48,61,-83,-118,-3,94,-5,7, 
  /* [18][0][][] */ -115,114,124,-48,-5,-89,-120,33,31,52,-94,-36,-23,28,83,-34,30,-31,76,-20,125,-31,10,-87,47,-103,1,127,44,61,-16,56,42,-25,-102,-87,-6,12,-3,65,-44,-15,-71,8,-118,-5,19,23,-2,-39,91,56,-102,16,-3,73,-52,45,-58,-102,112,127,50,25,-51,-103,-4,106,100,-60,-68,120,-80,-75,-63,-81,64,57,25,-49,-34,-15,-28,-114,115,-31,37,86,-88,-48,-36,102,86,-33,14,-20, 
  /* [19][0][][] */ 33,43,83,44,74,-81,104,86,110,-51,37,17,-83,38,-40,51,83,-94,98,57,-7,87,-61,36,68,-77,40,-55,-83,-120,-63,59,102,-71,40,15,-3,-62,-66,-100,67,-118,-86,10,-76,49,87,-98,-8,45,-35,58,-34,33,20,0,34,101,-14,-4,41,-42,87,67,-69,14,-22,12,-1,55,82,-48,-56,-115,-59,-78,-4,-99,9,114,59,-95,-35,81,-81,12,9,-7,87,24,-2,85,-6,127,76,-44, 
  /* [20][0][][] */ -22,57,71,79,-62,82,8,65,16,-16,-55,12,-13,47,35,-41,-40,-45,-63,-21,25,-43,-50,-65,66,-88,-60,43,22,30,-19,91,56,20,-27,45,53,-18,4,-85,-71,-24,-51,-66,-31,-61,-72,102,31,-127,-65,55,51,76,43,-18,70,69,94,78,111,-39,-49,-18,-6,-60,-27,1,-55,-56,-67,74,-54,-55,37,25,79,49,102,98,82,-18,80,1,47,60,-1,80,26,90,6,65,11,27,10,-1, 
  /* [21][0][][] */ 70,86,72,-96,101,-107,69,33,-22,-49,-56,40,13,8,-38,-66,-113,-13,7,0,103,-54,77,-62,59,-84,-15,81,23,20,-1,-31,10,20,-81,-91,119,89,-90,-23,-25,10,43,2,-93,-75,-77,102,-3,-127,12,100,45,71,-84,7,-43,61,-31,113,65,-64,23,-4,88,36,-17,-54,-92,-8,44,79,41,-12,79,69,-91,-20,71,111,21,52,47,-50,31,-76,60,-58,-83,92,99,-95,-41,-53,64,-38, 
  /* [22][0][][] */ 47,-34,-79,-98,115,-81,127,71,-108,116,-64,-94,127,-107,-99,-73,27,104,-115,-30,102,-70,55,56,106,21,-97,111,-34,-67,-56,-120,70,71,38,31,17,-1,-55,-112,-12,7,5,99,52,-99,103,0,-35,-46,27,-16,-49,-77,-28,49,3,-18,-14,-25,101,-79,-71,-96,-45,27,-87,-31,107,93,-16,5,-48,7,79,-89,56,-31,78,115,111,-77,-50,-122,91,109,118,-23,-26,62,-52,63,35,32,-11,125, 
  /* [23][0][][] */ 75,-88,29,63,73,-99,-11,-63,92,-75,79,102,24,-80,29,-38,108,-34,-102,82,95,-53,98,-28,-14,-25,86,16,71,46,74,-31,-29,45,27,26,84,0,-81,5,-119,-21,28,-106,-56,-73,127,26,74,-125,-105,-58,84,-50,-56,97,-94,-19,108,43,-93,-79,-58,-7,20,36,-107,-103,65,0,122,-68,0,-14,-35,-92,45,-39,96,115,-42,-62,32,-56,100,3,120,-4,-95,28,109,3,80,-31,-12,65, 
  /* [24][0][][] */ -57,-26,-119,-90,-64,-99,-52,-82,73,117,69,22,115,60,-21,-92,-66,54,2,-32,98,-62,-36,-19,45,-23,80,67,104,62,-12,-49,12,20,56,32,-30,-95,45,-6,-68,-85,71,18,31,-25,51,82,-59,-75,-14,11,58,69,51,-54,-23,82,10,8,83,6,44,87,-76,99,-30,-67,-86,43,-41,-21,-19,20,98,81,69,-54,-78,-57,-86,-105,-56,-127,14,73,-15,-84,28,-69,15,-62,-30,40,-113,13, 
  /* [25][0][][] */ -85,-48,-61,-10,90,-57,-95,68,57,-122,-28,24,74,-19,-95,-9,-64,61,20,-102,67,82,-7,-52,-35,-68,-86,44,55,-73,39,118,78,-100,36,65,108,-57,-7,-7,-76,88,-80,14,100,18,33,46,-97,58,-68,10,52,-15,-66,8,-50,58,-83,78,127,50,52,46,7,76,-8,-1,-77,-3,-31,-98,40,-94,78,27,70,34,25,26,59,17,-45,96,-66,-76,-101,-66,-20,-37,88,32,-126,-5,-19,-97, 
  /* [26][0][][] */ 64,-89,-42,-26,-72,-8,25,-25,-127,-70,87,61,-58,-51,-3,-16,87,56,-77,-54,-7,49,96,38,45,85,15,51,-1,-8,-92,6,-8,-36,-91,-100,-70,69,-63,119,-67,98,44,44,-41,68,-43,79,14,30,-12,76,1,-44,8,-77,87,73,42,23,-18,-78,61,-20,99,-3,-59,66,-109,64,72,79,92,-94,-76,-4,53,-85,-101,-2,-40,60,72,-75,75,26,-48,-4,-80,99,-4,21,-47,87,34,76, 
  /* [27][0][][] */ 21,25,-53,-96,-101,-62,-72,14,61,98,44,-109,-11,61,96,-13,76,-3,44,-62,-67,23,-16,-9,-98,44,-84,14,77,49,-39,-1,70,75,-71,-72,-61,-65,-78,93,-121,-10,20,30,101,32,77,120,96,50,70,-54,-70,-61,-44,-21,85,-9,-120,-62,-36,-44,-16,46,54,-30,-84,112,63,16,-98,20,72,-56,8,-73,59,-55,106,115,92,-35,127,-82,-58,-64,-25,57,-33,21,-20,-38,43,34,42,33, 
  /* [28][0][][] */ 92,-1,103,82,-75,-46,-57,-76,-30,-58,97,53,-52,-24,38,93,101,100,-44,107,32,42,-72,-63,-76,120,-64,-42,-21,-48,42,2,-58,38,114,108,2,-42,1,28,108,75,-62,41,-89,14,38,45,9,23,-6,-17,-50,45,102,60,119,-3,55,51,-8,-23,-64,30,71,82,1,94,-15,38,-62,-1,64,84,9,-36,-92,-43,-46,52,-24,13,127,6,62,-71,86,-71,-38,-15,14,-53,37,62,37,65, 
  /* [29][0][][] */ 73,47,63,-48,-78,31,-100,7,99,7,-76,-81,113,-94,-57,-48,-81,116,9,-75,-90,-29,71,21,-45,8,-40,-32,-102,-16,127,14,59,15,-70,-68,-25,116,-5,111,67,120,-17,86,21,117,-47,-41,38,-17,45,-96,92,-102,124,65,-98,70,-23,120,-115,105,-115,-30,-63,-54,37,83,79,-89,39,-61,115,94,58,32,119,-73,-43,16,-1,-78,5,-43,71,106,65,71,-44,81,51,100,-109,9,26,58, 
  /* [30][0][][] */ 30,-67,-54,43,-103,25,-71,-14,110,-15,0,-50,-101,21,59,65,0,32,96,-86,39,-91,-97,6,-118,24,-73,113,-5,-108,-85,7,-85,-69,-114,-52,11,-40,-24,21,91,-68,-24,93,100,-44,106,58,-71,75,8,-103,79,-50,-3,101,-76,-59,-82,-56,-108,-9,-60,-43,-115,-87,-95,90,-57,106,45,-42,-95,94,39,-102,-61,-54,-56,-61,14,28,-127,-21,-99,28,-78,97,-36,-117,80,45,-29,-3,-8,-61, 
  /* [31][0][][] */ 71,-60,21,77,47,61,-35,-72,4,-12,-57,-67,92,-92,-23,97,-41,-57,24,45,61,42,-19,93,21,-86,41,44,-68,-46,33,97,24,28,-63,-1,88,-43,-55,-72,59,-53,-45,39,17,-48,-30,27,69,11,71,-28,-91,-31,-67,29,-127,66,-12,99,-21,12,84,-53,62,99,-26,-47,69,-85,-81,17,-60,-52,16,5,-35,-42,49,83,-60,-56,29,28,56,78,-89,15,7,-42,-55,-31,0,97,-23,-35, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022174941841512918, 0.0020092444028705359, 0.0025077851023525, 0.0021323142573237419, 0.0021442112047225237, 0.0019067010143771768, 0.0024886538740247488, 0.0018534730188548565, 0.0020734602585434914, 0.0021566117648035288, 0.0021327550057321787, 0.0022589254658669233, 0.0024091468658298254, 0.0019850549288094044, 0.0021884313318878412, 0.0018747007707133889, 0.002008507028222084, 0.0018679293571040034, 0.001866562757641077, 0.0018032023217529058, 0.0023127058520913124, 0.002030013594776392, 0.0018667316762730479, 0.001961391419172287, 0.0020624820608645678, 0.0019447957165539265, 0.0020299395546317101, 0.0019314874662086368, 0.0021552164107561111, 0.0018258759519085288, 0.0018521496094763279, 0.0023546870797872543, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1207, -21, 2739, 5649, 4043, -1476, 3170, -975, -2193, -492, 4041, -2170, 2928, 4270, 1579, 1768, -445, -559, -790, 4848, 2030, -609, 2193, -397, -645, 2594, 1083, 1581, 4146, 1861, 3397, 982, 1057, 4627, 4474, 3506, -430, 4031, 2147, -3664, -27, 981, 34, 1778, -952, 439, -1004, 507, -5465, 2101, 1100, -2715, 4903, -692, 1666, 1531, 1126, 2501, -743, -1674, 231, 1196, 257, 3906, 4519, 3528, 2731, 4008, 3729, -937, 2210, 4234, 2821, -1232, 4939, 5623, 440, -3886, 517, 1046, 5631, 1925, -283, -2157, 1242, 442, 1049, -2254, 2885, -172, 2471, 752, 163, -3264, 64, 1296, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00017179400310851634, 0.00027451533242128789, 0.00023022136883810163, 0.00015534799604211003, 0.00015822617569938302, 0.00024444228620268404, 0.00018626211385708302, 0.00022596232884097844, 0.00018534122500568628, 0.0002579837164375931, 0.00015342578990384936, 0.0002125319151673466, 0.00019400398014113307, 0.00013863867206964642, 0.00019000972679350525, 0.00021665601525455713, 0.00034147367114201188, 0.00021011187345720828, 0.00027838165988214314, 0.0001321861200267449, 0.00021341098181437701, 0.00021293228201102465, 0.00016403298650402576, 0.00026715453714132309, 0.00030580675229430199, 0.00023985131701920182, 0.00024362116528209299, 0.00023749821411911398, 0.00017692898109089583, 0.00021891911455895752, 0.00015768998127896339, 0.00024559386656619608, 0.00029913851176388562, 0.00013353140093386173, 0.00013979048526380211, 0.0001358133158646524, 0.00021580075554084033, 0.00012533909466583282, 0.00016869846149347723, 0.00014592357911169529, 0.00028284866129979491, 0.00023795777815394104, 0.00028032521368004382, 0.00016309022612404078, 0.00021223710791673511, 0.00016193899500649422, 0.00025355955585837364, 0.00023647777561563998, 0.00012347340816631913, 0.00018349439778830856, 0.00024176371516659856, 0.00016454761498607695, 0.00014499240205623209, 0.00024546723579987884, 0.00022159109357744455, 0.0001738451246637851, 0.00020547583699226379, 0.0001621712144697085, 0.0002670655376277864, 0.00017051247414201498, 0.00028733749059028924, 0.00022604798141401261, 0.00037948225508444011, 0.00015173523570410907, 0.0001494424941483885, 0.00013834262790624052, 0.00014686795475427061, 0.00017272483091801405, 0.00018050936341751367, 0.00018550240201875567, 0.00020198737911414355, 0.00016419315943494439, 0.00016772992967162281, 0.00016424448403995484, 0.00014492819900624454, 0.00014083806308917701, 0.00015573290875181556, 0.00017089200264308602, 0.00022061636263970286, 0.00021275100880302489, 0.0001528106804471463, 0.0001896393223432824, 0.0002302168431924656, 0.00019045578665100038, 0.00018568547966424376, 0.00018751625611912459, 0.00024222770298365504, 0.00018331230967305601, 0.00023771492124069482, 0.00026902477839030325, 0.00024150899844244123, 0.00026507931761443615, 0.00019651834736578166, 0.0001367389049846679, 0.00033986405469477177, 0.00020911183673888445, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -21,88,-91,30,43,-46,107,58,-43,-3,22,-88,96,127,-55,23, 
  /* [1][0][][] */ -27,-6,-45,-25,-14,39,10,-127,15,-35,-11,-43,-22,-53,-66,15, 
  /* [2][0][][] */ -24,-33,22,75,11,36,-103,127,-33,-12,80,-47,-21,-77,-58,85, 
  /* [3][0][][] */ 81,-94,74,-9,-6,-36,-31,127,-33,47,63,54,-14,45,6,14, 
  /* [4][0][][] */ -50,-35,-15,39,-110,6,-43,-124,2,-12,20,-4,20,38,127,114, 
  /* [5][0][][] */ 127,23,-18,-34,-81,20,31,85,7,-14,82,97,109,8,-102,11, 
  /* [6][0][][] */ 19,-29,-50,-44,-60,1,-6,-61,-44,-43,-34,27,80,48,127,-13, 
  /* [7][0][][] */ -62,22,-23,-66,3,-56,-75,-1,-90,50,-66,-56,-127,-46,6,91, 
  /* [8][0][][] */ 56,49,73,12,56,25,78,17,61,-31,50,8,-127,-23,-82,15, 
  /* [9][0][][] */ -45,58,28,-54,-30,-11,35,-20,-33,54,-35,20,38,127,20,32, 
  /* [10][0][][] */ 91,67,-45,70,-17,-8,61,-50,-66,-39,-69,-127,-115,-60,25,90, 
  /* [11][0][][] */ 52,4,66,6,-14,-31,5,116,-95,23,-35,7,-19,0,76,127, 
  /* [12][0][][] */ -66,-32,5,-14,22,-7,127,32,-56,19,-1,-6,-23,74,-53,116, 
  /* [13][0][][] */ 7,29,31,46,127,64,98,70,-36,83,-67,-62,44,78,-123,-14, 
  /* [14][0][][] */ -119,125,17,-12,6,15,52,-10,-50,39,127,-14,-112,11,-70,49, 
  /* [15][0][][] */ -4,-9,-127,-36,80,-39,-77,-23,-19,-27,-13,-68,-1,-69,-54,42, 
  /* [16][0][][] */ 117,-9,16,-4,37,-28,44,-30,-33,13,127,43,57,10,-39,15, 
  /* [17][0][][] */ 16,18,-31,-95,-11,-71,127,-123,-4,-31,-49,24,47,90,12,49, 
  /* [18][0][][] */ 15,102,-8,-58,52,-72,-28,-67,-56,127,-24,-2,-30,54,-16,-20, 
  /* [19][0][][] */ -51,-97,127,-77,51,-124,17,-16,47,47,75,86,21,-2,92,-50, 
  /* [20][0][][] */ -25,79,50,-4,5,-2,26,-33,50,-8,95,-15,-127,-33,-78,-1, 
  /* [21][0][][] */ -61,52,33,32,67,38,65,67,-127,73,-54,11,-31,21,-56,-39, 
  /* [22][0][][] */ 3,-94,35,3,12,-127,94,-11,11,-55,-51,-60,36,-89,-44,-42, 
  /* [23][0][][] */ -57,-95,33,53,19,-25,28,-29,11,-41,80,8,14,71,71,127, 
  /* [24][0][][] */ -10,-10,14,62,41,23,-36,-127,61,12,-31,23,3,-6,-31,-16, 
  /* [25][0][][] */ -9,36,23,-43,-24,-17,14,-32,-21,48,-51,-18,52,127,25,8, 
  /* [26][0][][] */ -69,70,-1,10,26,-83,3,-22,13,18,12,77,8,1,-79,127, 
  /* [27][0][][] */ -28,-127,-48,-6,-55,88,7,-65,19,-28,56,-19,20,-46,-92,-17, 
  /* [28][0][][] */ -39,-5,32,64,29,14,-31,-127,-108,42,99,-7,63,3,-47,-19, 
  /* [29][0][][] */ -127,97,-15,-24,-14,14,-124,-79,-44,-37,-10,1,-1,-67,-109,66, 
  /* [30][0][][] */ 61,79,-36,88,-92,-90,-85,-18,-45,1,-1,-127,116,23,-8,81, 
  /* [31][0][][] */ 127,22,-71,-46,-74,16,100,60,-64,-19,68,63,28,14,-33,13, 
  /* [32][0][][] */ -40,-25,127,-7,-25,66,86,18,-26,-21,2,26,15,69,61,53, 
  /* [33][0][][] */ -11,25,-52,-47,-16,35,127,7,2,-9,36,-69,106,123,-66,56, 
  /* [34][0][][] */ -92,-8,117,41,45,-53,115,6,-127,46,44,-70,74,84,-44,-53, 
  /* [35][0][][] */ 9,35,-58,26,-78,127,-39,-2,-26,116,13,92,-61,85,29,31, 
  /* [36][0][][] */ -15,-76,127,-60,-57,24,-41,-8,15,23,-48,95,-5,-84,-45,54, 
  /* [37][0][][] */ 83,-23,71,-30,118,-99,-69,23,-83,127,-83,8,-114,-64,118,-8, 
  /* [38][0][][] */ 53,50,22,-91,-9,-47,-106,49,-78,57,-98,-53,-71,-127,-105,60, 
  /* [39][0][][] */ -72,23,-65,-36,-78,-88,77,23,-127,-45,21,74,44,5,-6,52, 
  /* [40][0][][] */ 127,26,-6,-118,-96,20,33,-21,-50,-33,-34,-78,14,37,33,53, 
  /* [41][0][][] */ 92,-72,-59,-39,1,-2,-54,-18,64,-25,-2,-58,127,-60,55,-32, 
  /* [42][0][][] */ -22,-94,-49,127,9,-103,-95,-7,20,5,4,68,-78,69,-66,3, 
  /* [43][0][][] */ -97,-53,-50,-115,-69,-8,1,70,39,-127,-41,36,-17,-57,-25,102, 
  /* [44][0][][] */ -53,34,32,-65,-37,-31,45,127,111,-90,95,124,114,43,-41,16, 
  /* [45][0][][] */ 45,92,-86,106,127,-95,-51,-62,125,-77,69,-78,-33,23,-70,57, 
  /* [46][0][][] */ -28,-38,6,-11,108,-25,43,24,-17,127,-16,-121,36,76,-61,88, 
  /* [47][0][][] */ 71,-51,-34,-19,72,-13,-38,-68,-10,127,-28,43,-9,-107,-88,19, 
  /* [48][0][][] */ 2,21,-15,-127,-2,-43,119,-100,-3,-1,-23,49,40,58,-7,43, 
  /* [49][0][][] */ -30,113,-80,39,40,-68,82,61,-36,12,39,-98,-16,82,127,-87, 
  /* [50][0][][] */ 7,39,-18,-1,-127,8,-67,-67,58,75,30,32,-42,-44,-2,37, 
  /* [51][0][][] */ 127,-58,-46,-27,-60,89,-96,-60,39,-18,-42,83,-42,-89,-13,55, 
  /* [52][0][][] */ -11,-30,56,85,-29,-96,-127,-24,-45,-46,-33,-71,8,-60,1,68, 
  /* [53][0][][] */ 19,87,60,-127,9,107,78,-27,-10,-16,7,-28,67,-119,-7,61, 
  /* [54][0][][] */ 38,127,12,-9,4,-82,-99,29,17,-19,-45,116,79,89,28,53, 
  /* [55][0][][] */ -56,-18,58,19,47,-45,119,127,-119,-6,37,27,126,40,-18,2, 
  /* [56][0][][] */ 127,33,11,28,-48,97,-55,-61,-18,33,-77,-1,-47,94,-2,33, 
  /* [57][0][][] */ -63,-54,-63,-52,-87,-103,68,-34,-127,-28,46,71,6,28,-6,66, 
  /* [58][0][][] */ 55,-45,64,37,8,-67,-18,15,25,-13,-127,-32,25,-29,-30,39, 
  /* [59][0][][] */ 63,2,-127,78,0,22,81,-28,-72,-53,19,-89,-112,-64,30,111, 
  /* [60][0][][] */ -11,19,-15,14,-25,-22,-24,-1,-40,-71,55,121,-44,-127,-41,6, 
  /* [61][0][][] */ -28,20,81,-101,-60,64,-8,127,-26,-83,73,69,67,-21,-6,104, 
  /* [62][0][][] */ 67,33,-14,-127,-22,-1,10,-41,-11,27,-35,47,22,-24,-83,-65, 
  /* [63][0][][] */ 1,-30,2,-10,-75,-68,-72,20,-85,-13,-34,-22,127,-9,55,-13, 
  /* [64][0][][] */ 16,-14,-11,42,-103,-46,-34,-105,49,120,30,14,23,-73,-57,127, 
  /* [65][0][][] */ -41,-2,-31,-28,-95,75,34,-40,67,-127,89,-65,70,62,-126,69, 
  /* [66][0][][] */ -109,120,-97,-76,47,-39,-124,-45,-121,127,118,-9,-108,-39,60,42, 
  /* [67][0][][] */ 7,-29,-127,-116,56,71,2,-17,-36,-6,54,-12,13,29,15,47, 
  /* [68][0][][] */ 67,32,-8,-43,-62,48,15,51,-69,75,127,-27,-5,-40,-115,-11, 
  /* [69][0][][] */ 80,-104,65,-42,24,-109,-46,127,1,76,74,79,-31,83,-10,-21, 
  /* [70][0][][] */ 59,16,127,55,98,-35,116,19,35,18,-76,31,-54,75,-66,28, 
  /* [71][0][][] */ 2,26,98,-80,-127,-73,16,1,-21,-7,24,-98,-87,-8,4,37, 
  /* [72][0][][] */ -63,-104,17,-123,67,-25,11,46,-75,6,-121,-14,50,109,-59,127, 
  /* [73][0][][] */ 17,11,47,6,127,-107,-54,-4,-41,89,-101,33,-88,-72,116,-11, 
  /* [74][0][][] */ -116,-6,-127,-77,55,-59,-35,16,-89,2,-113,-24,-40,-64,-47,92, 
  /* [75][0][][] */ 86,-34,45,-50,13,-2,-127,-33,-12,-103,70,10,4,-22,-13,-3, 
  /* [76][0][][] */ 8,-43,-23,127,52,101,115,-57,79,-126,90,115,51,-77,-80,41, 
  /* [77][0][][] */ -27,-24,127,-11,29,-31,-34,-97,19,26,32,74,35,53,26,-7, 
  /* [78][0][][] */ -49,-6,21,-33,-4,-45,19,-19,0,-7,23,-78,-106,-77,-127,-38, 
  /* [79][0][][] */ -122,-93,-22,33,127,20,-24,8,12,30,-20,54,-51,-102,-64,-11, 
  /* [80][0][][] */ 1,-91,34,127,-31,-37,-84,57,-18,6,59,-3,-74,-20,-32,70, 
  /* [81][0][][] */ 124,68,-23,85,-13,32,20,126,22,3,108,55,127,20,67,-24, 
  /* [82][0][][] */ -57,-3,8,-21,26,-127,-118,-93,0,64,-47,-37,-37,89,-76,-15, 
  /* [83][0][][] */ 91,-28,79,-16,-43,-23,-127,-21,15,-119,7,-40,-31,-26,-2,-5, 
  /* [84][0][][] */ -5,-96,-123,10,127,42,57,21,-125,24,-113,-9,63,-35,-94,26, 
  /* [85][0][][] */ 11,100,36,-54,104,-2,64,-119,127,-51,59,-12,114,-76,1,11, 
  /* [86][0][][] */ 117,-35,127,55,0,-60,71,36,-61,-52,-100,-48,32,13,-60,8, 
  /* [87][0][][] */ 0,10,21,-65,62,-34,-45,20,26,-43,68,-29,-85,-127,-2,25, 
  /* [88][0][][] */ -48,-23,41,6,22,21,-63,-37,-3,5,-71,-127,-43,-40,-11,-19, 
  /* [89][0][][] */ -86,1,12,-79,19,11,-127,5,78,19,-63,-1,-12,-94,-51,-14, 
  /* [90][0][][] */ -11,-18,-30,-66,127,13,-51,36,33,45,33,-7,32,12,-69,-13, 
  /* [91][0][][] */ -32,-57,19,58,-55,-24,-19,87,-49,-63,21,-43,-23,46,27,127, 
  /* [92][0][][] */ -22,82,5,-13,-14,63,-101,57,-40,-2,66,0,-36,127,53,19, 
  /* [93][0][][] */ -2,88,-51,-61,79,96,-90,14,79,72,80,49,-127,33,-31,75, 
  /* [94][0][][] */ 25,62,85,11,-127,-40,8,-19,14,-27,28,-14,-54,-26,7,-15, 
  /* [95][0][][] */ 2,27,28,-17,127,-11,-80,76,33,17,-79,70,-9,10,93,-44, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0017311049159616232, 0.0027661898639053106, 0.0023198558483272791, 0.0015653845621272922, 0.0015943868784233928, 0.002463154960423708, 0.0018768946174532175, 0.0022769391071051359, 0.0018676151521503925, 0.0025996067561209202, 0.0015460151480510831, 0.0021416058298200369, 0.0019549066200852394, 0.0013970107538625598, 0.0019146580016240478, 0.0021831628400832415, 0.0034409041982144117, 0.0021172198466956615, 0.0028051494155079126, 0.0013319908175617456, 0.0021504638716578484, 0.0021456400863826275, 0.0016529000131413341, 0.002692017937079072, 0.0030815019272267818, 0.0024168933741748333, 0.0024548806250095367, 0.0023931819014251232, 0.0017828481504693627, 0.0022059672046452761, 0.0015889838105067611, 0.0024747587740421295, 0.0030143086332827806, 0.0013455466832965612, 0.0014086171286180615, 0.0013685406884178519, 0.0021745446138083935, 0.0012629958800971508, 0.0016999122453853488, 0.0014704180648550391, 0.0028501616325229406, 0.0023978129029273987, 0.0028247337322682142, 0.0016434001736342907, 0.0021386351436376572, 0.0016317995032295585, 0.0025550262071192265, 0.0023828994017094374, 0.0012441960861906409, 0.001849005464464426, 0.0024361638352274895, 0.001658085617236793, 0.0014610349899157882, 0.0024734828621149063, 0.0022328917402774096, 0.0017517732921987772, 0.0020705042406916618, 0.0016341395676136017, 0.0026911210734397173, 0.0017181914299726486, 0.0028953941073268652, 0.0022778022103011608, 0.003823902690783143, 0.0015289799775928259, 0.0015058768913149834, 0.0013940277276560664, 0.0014799343189224601, 0.0017404844984412193, 0.0018189263064414263, 0.0018692393787205219, 0.0020353524014353752, 0.0016545139951631427, 0.0016901526832953095, 0.0016550311120226979, 0.0014603880699723959, 0.0014191732043400407, 0.0015692631714046001, 0.0017220157897099853, 0.0022230697795748711, 0.0021438135299831629, 0.0015398169634863734, 0.0019109254935756326, 0.0023198102135211229, 0.0019191527971997857, 0.0018710840959101915, 0.0018895321991294622, 0.0024408393073827028, 0.0018471705261617899, 0.0023953656200319529, 0.0027108634822070599, 0.0024335971102118492, 0.0026711064856499434, 0.0019802430178970098, 0.0013778675347566605, 0.0034246847499161959, 0.0021071429364383221, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 10460, 13236, -2849, 454, -3156, 7884, -1621, 8302, 13836, -5925, -5583, 9684, -15588, 12515, 6651, 8512, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.2271392380353063e-05, 6.1898426793050021e-05, 7.0849717303644866e-05, 7.6829499448649585e-05, 8.3213271864224225e-05, 8.7277760030701756e-05, 5.4684824135620147e-05, 6.0646183555945754e-05, 8.8389977463521063e-05, 6.4229745476040989e-05, 7.0034970121923834e-05, 5.1202619943069294e-05, 6.6379710915498435e-05, 6.6446700657252222e-05, 0.00010063176159746945, 9.4329523562919348e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -106,38,54,-34,-61,-9,-71,-16,-44,9,-23,-34,40,42,35,-41,0,-10,86,11,1,-56,127,64,49,11,0,28,-55,-104,-68,9,-41,-39,28,27,2,34,11,21,-20,1,-66,5,-67,-32,7,89,-32,-5,-54,-24,-27,1,37,-49,-80,7,-4,91,62,23,-7,-1,-34,-55,-45,33,-78,-60,4,-11,10,-5,-67,-48,-46,22,-37,22,-53,50,79,-70,14,44,23,51,43,-20,-15,-16,-30,-36,-64,17, 
  /* [1][0][][] */ 43,25,39,-58,-70,-16,-20,3,-9,25,50,-61,5,-22,-74,-43,-15,3,-65,29,-24,-92,12,53,-4,-59,-3,-57,70,-114,113,-67,55,32,-15,65,47,87,-14,-46,16,19,-11,-13,8,47,-127,-51,-64,-62,-17,-15,45,-50,-33,45,23,6,-11,27,37,60,-18,-96,-18,-17,-81,11,-8,5,-97,-5,-44,-25,15,-73,2,13,36,-76,-31,-40,-84,-20,20,-32,-6,6,-64,-10,-58,47,36,74,-54,68, 
  /* [2][0][][] */ 80,-41,15,17,26,-72,50,10,-5,-10,-14,-13,-56,-16,11,-32,-75,-38,-38,36,18,-55,-38,23,13,-70,-5,-26,-28,47,-40,112,-53,127,-21,21,-2,-20,-19,-6,-105,70,57,20,-59,2,-20,-14,20,6,-42,-39,50,-16,-7,51,38,2,36,-10,12,35,-19,2,50,26,-12,2,37,42,-37,1,48,41,50,35,27,-61,53,44,70,-22,-40,23,-53,16,24,58,29,8,-23,21,-50,56,-30,41, 
  /* [3][0][][] */ 1,-8,-31,9,16,-8,-1,-59,-13,64,36,57,36,1,-55,49,5,-41,30,12,7,127,43,-40,21,12,-21,11,69,-22,80,-18,-19,33,-37,-13,16,65,52,0,-78,-28,-25,27,-36,37,34,5,-15,-59,-14,-30,33,-86,-31,-40,23,84,-32,7,2,-23,-37,-3,32,48,-44,-3,-38,0,15,-78,-25,-45,35,-13,5,7,-42,-13,-27,-5,-56,8,-4,-33,45,-15,17,26,23,-9,42,25,-48,61, 
  /* [4][0][][] */ 35,10,-29,3,25,29,-48,19,-28,86,90,-15,-5,-7,5,-46,17,-13,-33,54,24,-41,59,76,-60,0,-127,19,-38,-57,22,22,-59,-40,12,58,18,38,9,22,-33,-40,50,-21,-12,-1,-26,58,-32,61,11,24,43,-8,-78,16,53,-13,5,0,43,-9,31,14,-45,22,-34,5,-49,29,-45,46,50,-60,-38,-42,17,-49,-5,14,-36,97,-78,9,-32,9,28,-44,56,7,20,7,-51,-18,34,29, 
  /* [5][0][][] */ -72,33,55,-12,38,-14,52,-19,-21,34,-11,-28,31,-35,-9,-54,-18,-28,47,14,-127,-21,-71,37,-28,-11,45,1,30,-71,-20,35,46,101,-1,36,-6,23,38,-30,-22,81,59,-26,10,62,35,-1,-4,-6,-24,12,26,-25,30,-84,37,-44,-45,-39,60,88,-59,-18,61,-45,-66,-46,-70,-19,-67,5,-12,6,-28,-41,34,-40,-23,-26,105,-36,16,-71,-72,29,9,-20,-53,30,15,13,-6,34,20,75, 
  /* [6][0][][] */ 29,-9,-60,11,-38,-97,103,103,-71,80,-4,56,-122,-100,62,43,1,-62,-13,-4,-25,-12,-56,-67,-53,57,77,31,28,21,88,-53,28,6,20,-78,9,2,13,60,17,12,-46,-15,2,-58,-75,19,51,-127,-11,63,56,18,-26,-72,75,49,13,20,-97,66,-97,14,36,-2,3,50,23,20,-24,-36,-23,19,90,45,64,-21,57,-78,1,-49,-89,76,6,-57,31,11,-60,73,32,53,-22,14,-16,102, 
  /* [7][0][][] */ 27,80,-47,-75,-28,-15,36,-9,-70,22,-59,-55,-33,29,26,-21,-47,-50,-50,65,8,127,20,23,-16,2,5,25,60,45,103,-15,72,32,-14,8,-4,-14,-7,35,-90,-7,16,-79,4,-71,85,-28,33,-71,-104,-31,-65,-3,2,-13,45,12,-113,-6,-14,114,28,-37,-29,3,-36,24,-50,-26,-110,29,34,74,-37,49,-55,68,3,-80,-25,-49,73,-78,52,-28,-2,11,-16,63,-102,37,77,-33,-59,8, 
  /* [8][0][][] */ 0,91,-37,37,-38,-23,-94,37,-90,-24,7,2,-42,30,28,83,2,-53,14,4,19,-1,-5,-11,-27,73,4,28,-18,-13,-46,-33,-28,-45,-26,-68,-34,38,56,-6,-1,-39,33,19,-27,-29,14,-6,-13,-33,52,75,2,-11,-70,98,-34,28,4,-22,-33,5,12,57,-29,-65,-37,-2,-52,14,-1,3,-16,-57,-123,-18,-46,20,-55,-36,-32,-6,-46,-25,-4,-4,15,19,19,67,-60,-4,-85,-127,30,-44, 
  /* [9][0][][] */ -6,28,-77,55,-31,-35,56,61,8,53,-19,92,-36,-14,16,127,12,10,79,23,3,7,29,-84,-17,-7,28,-12,12,-6,43,44,-30,6,-8,-96,37,-11,-10,-16,-17,26,35,-18,-3,15,12,28,27,70,21,-8,-57,-75,-1,14,0,-12,68,-10,-53,46,-60,-35,73,-11,-32,13,-67,28,39,35,-18,76,-24,-22,-36,14,-49,-6,48,-37,63,-7,31,-17,-2,-33,-38,22,7,9,57,38,-48,8, 
  /* [10][0][][] */ 68,-4,-36,-20,-35,-26,84,-6,1,-29,-13,-23,-85,-34,10,-22,-68,-37,12,9,21,26,22,-9,-42,84,35,-24,-56,-87,-36,-15,76,-46,61,4,73,-85,69,117,9,-61,0,16,-10,-98,-21,50,19,68,-80,-57,-5,30,13,40,24,-49,69,63,-5,69,-65,-26,-11,-66,28,64,5,-34,-32,51,127,42,30,-77,36,-52,63,-24,-42,12,30,34,-39,-9,-7,23,-52,1,25,63,47,73,-28,4, 
  /* [11][0][][] */ -61,-40,57,-67,9,-10,-20,-63,50,-55,-2,-5,-13,-17,10,7,-83,-8,71,4,-75,27,-81,-82,4,24,-40,42,28,-78,20,-44,28,-19,27,-29,-88,4,-127,9,-65,66,-48,51,35,16,-1,-55,25,-52,-58,-72,25,29,79,-70,-35,-64,30,-57,-32,-41,-41,-124,19,-86,81,77,118,29,72,-11,-42,-9,83,-38,116,43,43,53,35,-23,-24,86,86,25,-7,-35,-100,-74,-14,30,69,35,82,81, 
  /* [12][0][][] */ 27,-19,8,-56,38,127,-5,50,39,75,2,56,21,35,26,-15,-71,45,6,40,111,3,78,-83,39,31,-76,-69,-25,79,5,7,29,-19,13,-36,37,-1,-40,-51,27,-24,53,60,-16,32,6,-8,-60,9,8,16,-12,-22,11,11,-26,67,11,71,30,-92,6,-94,-6,99,-12,-37,-23,-42,47,25,4,11,-14,50,-6,51,-68,-15,-17,28,115,25,-10,77,-41,-80,57,17,-89,66,77,13,-5,-111, 
  /* [13][0][][] */ -31,36,-7,-69,-36,-11,-8,-24,-6,-28,-23,-83,62,-114,-47,-96,-8,-54,-100,-27,-117,-23,23,99,-24,9,106,11,29,-39,78,59,17,-9,-127,126,-41,-45,31,-80,111,8,10,40,-8,-105,80,-31,96,-20,-49,15,29,5,-14,77,92,-58,-56,17,63,53,6,-87,7,29,-36,33,-105,-41,-100,10,-55,21,-54,-78,-117,34,43,99,-11,67,25,-78,64,30,20,-10,-35,-1,-10,29,-54,18,-12,-20, 
  /* [14][0][][] */ -13,26,-89,-39,86,89,-91,-20,38,-37,76,-9,12,-17,-43,-76,-68,2,26,127,1,-27,8,3,4,26,-28,69,21,-1,-6,18,69,-6,-49,9,-24,70,77,4,50,8,34,-2,-20,-55,71,-31,26,-30,-24,-37,25,11,-32,36,33,58,-95,-6,-9,-74,-37,-115,15,-42,-55,-8,-106,54,-25,29,6,-31,-17,-34,33,0,-55,-13,38,-3,5,-18,-9,49,-6,-9,-25,66,68,29,0,-41,-58,-72, 
  /* [15][0][][] */ -71,-51,41,-56,20,-32,-21,-70,-18,6,1,56,-10,-26,34,88,-95,-7,13,-63,44,-21,-10,-80,31,-2,43,-54,-62,-110,-70,26,-34,45,97,-105,-13,-61,-2,-15,-16,-7,34,-22,-7,-9,51,87,-41,16,30,-32,-23,51,13,-64,-101,-14,85,-4,-35,39,-79,35,-59,-6,19,15,71,-82,85,-24,66,-25,-32,-38,24,29,52,-10,-11,80,46,36,2,-22,-127,13,-23,-46,-78,13,40,-31,-9,54, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0026465340051800013, 0.0026306831277906895, 0.0030111130326986313, 0.003265253733843565, 0.003536564065143466, 0.0037093046121299267, 0.0023241050075739622, 0.0025774626992642879, 0.0037565738894045353, 0.0027297642081975937, 0.0029764862265437841, 0.0021761113312095404, 0.0028211376629769802, 0.0028239847160875797, 0.0042768497951328754, 0.004009004682302475, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 370, -1120, -2843, -3614, -545, 3417, -1207, -1354, -35, -3163, 6317, -1487, 461, 9464, 7968, -5243, 18041, 185, -4230, -1262, -2333, -715, 540, -2966, 668, -4003, -383, -3864, -61, -6413, -1589, -330, 10158, -471, -3861, 5, 684, -1994, -1257, 7125, 612, 340, 2235, -6202, 13083, 13988, 1807, 14012, -2390, 13005, 11801, -3717, -802, -4435, -161, 11829, 150, 1831, 11712, 5457, 6724, 13742, 6297, -7230, 2507, 1247, -2516, 3304, -5719, -1356, 3356, 812, 9390, -390, 818, 9345, -2577, -3223, 7802, -199, -194, 17825, -190, 963, 14651, 2165, -2148, -4045, -2942, -6143, 12983, 1092, -1467, 188, -5446, -4367, };
const TfArray<96, float> quant10_scale = { 96, { 0.00032163670402951539, 0.00017168372869491577, 0.00010959320206893608, 0.00021117096184752882, 0.00024814574862830341, 0.00032149493927136064, 0.00036947251646779478, 0.0001934013853315264, 0.00024603732163086534, 0.000191560058738105, 0.0001105186966015026, 0.00034623648389242589, 0.00025128846755251288, 0.00015129648090805858, 0.00017060748359654099, 0.00012356565275695175, 7.9454723163507879e-05, 0.00022085763339418918, 0.00013810394739266485, 8.5655970906373113e-05, 0.00021587376249954104, 0.00038566076545976102, 0.00020993124053347856, 0.00017321000632364303, 0.00069197406992316246, 0.00019405529019422829, 0.00027432219940237701, 0.00014324633229989558, 0.00017395078612025827, 0.00010291700891684741, 0.00034264117130078375, 0.00022609664301853627, 0.00019227992743253708, 0.00018589335377328098, 0.00028121404466219246, 0.00029413719312287867, 0.00018687489500734955, 0.0002029372553806752, 0.00031957682222127914, 0.0001158170125563629, 0.0001780147576937452, 0.0002435870555927977, 0.00021474102686624974, 0.00011340258060954511, 9.598402539268136e-05, 0.00012525892816483974, 0.0002031222393270582, 0.00011078351963078603, 0.00022041800548322499, 9.4150644144974649e-05, 0.00014748226385563612, 0.00012053563841618598, 0.00018988929514307529, 0.0001681281573837623, 0.00024456094251945615, 0.00013299974671099335, 0.00024651316925883293, 0.00019670091569423676, 0.00014468113658949733, 0.00011626296327449381, 0.00015318029909394681, 0.00014906666183378547, 0.00014213056419976056, 0.00011390570580260828, 0.00015230091230478138, 0.00027519505238160491, 0.00027944237808696926, 0.00019604721455834806, 0.00022641499526798725, 0.00020830830908380449, 0.00024118476721923798, 0.00018245742830913514, 0.00017930076865013689, 0.00028450251556932926, 0.00028639240190386772, 0.00010564608965069056, 0.00013978748756926507, 0.00016745165339671075, 0.00016462257190141827, 0.00023012114979792386, 0.00021658759214915335, 0.00010523368109716102, 0.00024759102961979806, 0.00015803301357664168, 9.6579773526173085e-05, 0.00015559408348053694, 0.00018061112496070564, 0.00018838822143152356, 0.0002855626808013767, 0.00017696239228826016, 8.8543907622806728e-05, 0.00042449423926882446, 0.00020908878650516272, 0.00029104400891810656, 0.00010426409426145256, 0.00025928558898158371, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 24,127,-2,18,-26,1,38,35,60,-71,-86,32,-21,5,-5,-67,-111,15,19,69,26,49,87,86,14,-23,-56,9,-7,10,29,-23,-45,-12,-25,127,7,97,6,-6,33,-35,-13,24,-74,-24,3,-34,-15,-75,-45,4,41,66,-18,3,-69,-82,-65,-127,-127,10,-77,10,-40,36,41,-17,-18,30,45,-6,-35,17,35,-9,7,-24,-44,29,-3,-84,61,-20,-23,-63,-17,16,-76,5,-58,29,85,-11,61,10, -39,-32,14,66,-4,90,-15,2,57,36,-127,41,-39,-35,-90,114,-117,73,71,109,127,9,100,112,18,3,9,36,7,127,-15,-127,43,79,13,16,75,125,-15,-127,127,-19,87,127,-24,-29,127,-66,2,-127,-97,-19,57,127,-36,-127,19,18,-127,-76,-22,-96,-27,125,-45,66,86,-36,21,127,127,2,-38,28,-54,-73,23,-62,-6,127,-13,-76,127,-50,-118,-42,53,50,112,83,-63,-1,127,-36,127,38, 27,-120,19,9,-5,-8,-2,49,26,59,-76,12,-21,33,-14,-84,-63,24,12,52,37,45,60,106,12,-45,19,36,24,12,-5,-64,-52,-87,-20,109,11,23,19,31,-9,24,-15,70,-33,-1,-3,24,33,-56,6,18,41,10,15,11,35,-93,-28,-88,-102,29,-61,-21,45,19,-12,-3,-14,-13,22,13,-17,-35,-16,10,35,8,-33,5,12,-106,28,-8,8,-49,10,-26,-64,2,-26,26,36,29,28,-6, 
  /* [0][1][][] */ 87,-3,79,127,-16,-56,127,52,-45,-110,-39,127,-2,-127,-43,61,-86,-50,82,45,-104,-1,-127,-77,-20,78,-127,127,-102,84,127,84,17,63,24,118,-127,87,-15,-67,61,-127,14,64,-127,-66,-5,-109,-93,-87,-94,8,109,-33,90,-29,-127,-11,-63,0,-60,-75,-45,35,-127,-20,127,-90,-38,38,-54,-127,-127,59,127,-108,127,84,-92,-39,127,-110,-34,120,-30,-27,-4,103,10,27,-54,8,-3,-84,81,-6, -127,17,-50,111,-93,-127,-118,-127,76,19,5,20,-96,-98,-33,127,-127,-127,127,127,42,-127,-126,127,-127,127,16,69,-89,-15,-112,79,-127,91,127,-91,30,127,127,-124,-50,22,8,31,-73,-127,-89,-127,6,-120,-127,127,14,77,46,-108,21,16,81,-28,-4,-46,-127,127,-20,-127,118,127,18,47,-115,-71,-35,54,-120,-127,126,127,74,-54,-103,-21,-100,72,-127,-111,127,127,127,127,-127,-127,-97,-59,85,127, 55,-17,118,78,-8,-32,11,43,-53,127,-49,57,2,-17,-127,97,-4,-35,25,23,-102,13,-82,-52,-11,32,127,14,127,97,22,-98,-9,-127,1,119,-119,-11,-30,-39,-12,89,14,115,-44,-32,-16,-61,127,-60,-47,-8,29,-57,-127,37,96,-8,-110,69,-9,-64,0,33,127,-35,22,-5,-42,4,-52,-38,-103,-127,-4,-56,19,6,-127,-40,-95,-127,-31,127,-108,4,-5,12,-29,3,-19,26,-20,127,37,-10, 
  /* [0][2][][] */ 21,-119,26,15,20,13,34,68,-43,-44,10,-59,11,-16,8,44,-37,30,-30,34,9,33,13,-18,5,63,-7,0,-40,1,17,35,-2,-5,-10,12,24,-40,4,-31,8,17,-23,-28,-33,-79,-17,-24,-12,-8,5,30,-18,17,-20,-4,-19,-19,32,65,-41,-35,37,-13,-40,48,-13,-45,55,3,1,76,-3,7,17,18,-11,-9,-22,2,26,7,-15,-32,-61,25,-37,8,-67,27,2,13,-7,7,17,-3, -60,28,127,20,127,62,-30,22,-127,15,-47,-49,127,-48,-73,18,-3,61,-20,-46,34,13,65,21,49,-46,-5,20,-14,77,-7,28,-75,42,24,-30,61,73,33,-115,-24,-5,-127,22,-19,-55,-50,-63,-7,-71,-37,93,127,-35,-33,-107,-20,127,2,29,74,-127,65,71,-44,21,-11,3,127,-9,-3,101,-30,24,-28,-53,20,-49,-46,-57,5,-104,-32,-71,-47,127,23,11,91,48,18,13,-22,-3,21,16, 11,105,2,5,11,-11,-11,52,-3,53,15,-5,8,15,0,82,-34,26,-32,36,-2,32,-4,3,-2,47,21,26,11,17,-13,-52,-28,-13,-6,-13,9,-71,1,-20,-7,-2,-5,21,-43,-54,-23,-25,25,-2,5,7,-23,9,14,9,10,-3,39,85,-17,-10,32,-8,23,16,-27,5,60,-2,-6,87,33,-10,-6,28,5,15,-22,0,-3,-34,-17,-9,-57,37,-41,-12,-78,32,3,9,-15,19,13,0, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.013669559732079506, 0.0072965584695339203, 0.0046577109023928642, 0.0089747654274106026, 0.010546194389462471, 0.013663535006344318, 0.015702581033110619, 0.0082195587456226349, 0.010456586256623268, 0.0081413025036454201, 0.0046970443800091743, 0.014715050347149372, 0.01067976001650095, 0.0064301001839339733, 0.007250817958265543, 0.0052515403367578983, 0.003376825712621212, 0.0093864491209387779, 0.0058694174513220787, 0.003640378825366497, 0.0091746347025036812, 0.016390582546591759, 0.0089220777153968811, 0.0073614250868558884, 0.029408896341919899, 0.0082473494112491608, 0.011658693663775921, 0.0060879690572619438, 0.0073929079808294773, 0.0043739727698266506, 0.014562249183654785, 0.0096091069281101227, 0.0081718964502215385, 0.0079004671424627304, 0.011951596476137638, 0.012500829994678497, 0.0079421829432249069, 0.0086248330771923065, 0.013582014478743076, 0.0049222228117287159, 0.0075656273402273655, 0.010352449491620064, 0.0091264937072992325, 0.0048196096904575825, 0.0040793209336698055, 0.0053235040977597237, 0.0086326953023672104, 0.0047082994133234024, 0.0093677649274468422, 0.0040014022961258888, 0.0062679960392415524, 0.0051227645017206669, 0.0080702947452664375, 0.0071454467251896858, 0.010393840260803699, 0.0056524891406297684, 0.010476808995008469, 0.0083597889170050621, 0.0061489483341574669, 0.0049411756917834282, 0.0065101627260446548, 0.006335332989692688, 0.0060405489057302475, 0.0048409923911094666, 0.0064727887511253357, 0.011695790104568005, 0.011876300908625126, 0.0083320066332817078, 0.0096226371824741364, 0.0088531030341982841, 0.010250352323055267, 0.0077544404193758965, 0.0076202824711799622, 0.012091357260942459, 0.012171677313745022, 0.0044899587519466877, 0.0059409681707620621, 0.0071166954003274441, 0.006996458861976862, 0.0097801489755511284, 0.0092049725353717804, 0.0044724312610924244, 0.010522618889808655, 0.0067164027132093906, 0.0041046403348445892, 0.0066127483732998371, 0.0076759727671742439, 0.0080064991489052773, 0.012136413715779781, 0.0075209015049040318, 0.0037631159648299217, 0.018041005358099937, 0.008886273019015789, 0.012369370087981224, 0.0044312239624559879, 0.011019636876881123, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 5721, 2983, 1118, -1371, 4357, 8904, 6235, 1002, -208, 7152, 501, -2498, 2629, 2524, 532, -493, 2829, 5543, -188, 280, 2340, 8963, 7800, -1428, -2667, -518, 12064, -390, 1371, 1484, 7051, -1571, 6730, 1600, 3173, -2650, 609, -3413, 144, 1497, 2279, 727, 1103, -258, 806, 2188, 3259, 3464, 3142, 1617, 5509, 2444, -2128, 1325, 865, 1979, 1676, 2288, 6040, 780, -905, 5377, 3493, 3506, 4136, 5256, -4186, 2379, 3259, -562, 5348, 1142, 2577, 2579, 2792, 2048, -564, 1763, 1726, 3545, 2067, 3206, 8798, 527, 2325, 3518, 631, -811, 13207, -100, 511, -1079, 10742, 1917, -184, -739, };
const TfArray<96, float> quant12_scale = { 96, { 0.00013613142073154449, 0.00013239905820228159, 0.00019775261171162128, 0.00021200843912083656, 0.00016419737949036062, 9.0859364718198776e-05, 0.00013036973541602492, 0.00023545177828054875, 0.00019741627329494804, 0.00011392913438612595, 0.00025080586783587933, 0.00017424608813598752, 0.0001969090080820024, 0.00021080541773699224, 0.00019714633526746184, 0.00016253632202278823, 0.00022346018522512168, 0.00012797786621376872, 0.00018437346443533897, 0.00018427280883770436, 0.00024138858134392649, 0.00010503277735551819, 0.00011494485079310834, 0.00018274302419740707, 0.00021054716489743441, 0.00022655128850601614, 8.0156904004979879e-05, 0.00016271702770609409, 0.00020398414926603436, 0.00014323598588816822, 0.00011781971988966689, 0.00018399546388536692, 0.00012376696395222098, 0.00027455374947749078, 0.00020341975323390216, 0.00021235409076325595, 0.00019022698688786477, 0.00016953737940639257, 0.0002556123654358089, 0.00019931531278416514, 0.00020810644491575658, 0.00031772779766470194, 0.00031184463296085596, 0.00023448490537703037, 0.00030797751969657838, 0.00020391409634612501, 0.00018491147784516215, 0.00017546431627124548, 0.00017804211529437453, 0.00028787742485292256, 0.00013961998047307134, 0.00016274341032840312, 0.00017133048095274717, 0.00024570582900196314, 0.00025583189562894404, 0.00018874763918574899, 0.00023840388166718185, 0.0001864204095909372, 0.00012740716920234263, 0.00024713319726288319, 0.00026018955395556986, 0.00013809232041239738, 0.00016307673649862409, 0.00018122061737813056, 0.00014881866809446365, 0.00014568811457138509, 0.00014651524543296546, 0.00017194368410855532, 0.00016135086480062455, 0.00024854342336766422, 0.00013304436288308352, 0.00019751497893594205, 0.00018738566723186523, 0.00015551724936813116, 0.00021616076992359012, 0.00012590270489454269, 0.00022094420273788273, 0.00019746515317820013, 0.00020346452947705984, 0.00014606694458052516, 0.00022583737154491246, 0.00013744282478000969, 9.4440962129738182e-05, 0.00020657089771702886, 0.00015508079377468675, 0.00019387161592021585, 0.00020897823560517281, 0.00028521739295683801, 6.985314394114539e-05, 0.00022667579469271004, 0.00025656956131570041, 0.00023658368445467204, 7.4704796134028584e-05, 0.00020745868096128106, 0.00031044220668263733, 0.00018994476704392582, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -52,54,-16,-36,-20,-69,-69,-19,33,-61,39,-83,80,-109,9,-127, 
  /* [1][0][][] */ -105,66,-101,-121,-83,26,-28,72,-59,10,111,-49,25,127,22,37, 
  /* [2][0][][] */ -59,-30,-51,-13,-7,-52,7,-34,-105,110,80,2,30,36,-61,127, 
  /* [3][0][][] */ -58,-73,11,-36,-64,11,-62,-127,-1,23,43,-83,-65,-50,-117,-38, 
  /* [4][0][][] */ 75,6,-9,37,-51,-6,-127,42,16,71,20,49,27,12,-63,-102, 
  /* [5][0][][] */ -94,53,-74,-24,68,-59,-20,-74,104,-8,-1,-57,32,-109,-122,-127, 
  /* [6][0][][] */ -4,-44,-16,10,-97,57,41,-42,-23,-54,127,-46,-17,-8,-120,-10, 
  /* [7][0][][] */ -49,108,127,-66,79,82,23,-63,47,85,-88,-38,60,21,18,67, 
  /* [8][0][][] */ -38,7,52,-25,73,-3,90,127,-76,-6,-76,-64,37,88,-54,-83, 
  /* [9][0][][] */ 34,46,88,6,-105,-50,-92,-97,42,11,127,10,-29,-92,42,-9, 
  /* [10][0][][] */ -4,-102,26,-53,-127,78,26,6,-34,-57,-15,33,-4,57,-108,18, 
  /* [11][0][][] */ 93,-54,-10,56,-88,-26,64,-28,127,101,-44,28,41,-88,-25,106, 
  /* [12][0][][] */ -46,-64,127,-15,74,-19,20,60,80,-18,101,67,-13,24,-86,16, 
  /* [13][0][][] */ 0,-43,29,20,24,4,127,63,-82,25,-16,-4,-21,85,96,-84, 
  /* [14][0][][] */ 119,-92,127,5,54,54,96,62,78,81,52,48,91,-44,27,-63, 
  /* [15][0][][] */ -7,112,43,-50,31,104,-117,54,-82,-26,-50,15,-67,127,-2,-44, 
  /* [16][0][][] */ -48,52,98,-54,18,83,5,1,-15,8,-9,37,86,10,70,127, 
  /* [17][0][][] */ 33,127,117,-125,27,-58,3,-60,-71,73,-36,39,-48,-51,121,-83, 
  /* [18][0][][] */ -94,-14,-57,-105,127,72,-61,-76,43,94,99,75,-22,93,-40,-10, 
  /* [19][0][][] */ 37,127,86,64,46,-39,-2,-8,-19,118,41,103,76,62,-71,40, 
  /* [20][0][][] */ 86,-3,-20,86,-53,8,-16,55,-2,-44,-127,-41,78,-30,12,-14, 
  /* [21][0][][] */ -73,-60,-37,125,-38,8,-127,61,21,-3,38,17,-26,34,-68,19, 
  /* [22][0][][] */ -14,-2,-76,-59,127,-11,-37,79,66,90,25,56,0,25,-20,32, 
  /* [23][0][][] */ -78,22,-4,21,28,69,103,102,-28,127,-29,-38,12,36,-77,-47, 
  /* [24][0][][] */ 40,-80,44,6,127,32,64,-30,57,35,47,29,-61,35,2,-27, 
  /* [25][0][][] */ 112,-72,66,22,-6,7,-39,93,113,-8,-72,3,127,-39,91,46, 
  /* [26][0][][] */ 35,33,86,85,68,-8,-62,-11,-9,77,8,127,42,-65,34,-49, 
  /* [27][0][][] */ -35,46,-81,35,-38,80,20,-78,28,-85,94,7,49,-52,127,76, 
  /* [28][0][][] */ -41,46,-96,-127,34,-95,-1,-26,-108,107,-49,46,-33,43,-20,63, 
  /* [29][0][][] */ 90,96,-83,44,20,85,-54,-17,38,48,22,66,-127,21,-15,78, 
  /* [30][0][][] */ -28,78,-117,-58,87,-33,23,23,-58,67,-86,-7,11,94,0,127, 
  /* [31][0][][] */ 17,-106,82,37,62,-72,-72,23,-23,-16,31,-36,-88,51,26,127, 
  /* [32][0][][] */ -47,60,4,39,-81,56,7,48,8,-127,24,-73,24,29,42,41, 
  /* [33][0][][] */ -65,-2,49,88,-6,27,-52,18,-37,-59,20,-10,-17,-14,-1,127, 
  /* [34][0][][] */ -17,-2,-86,-91,60,-13,-9,66,21,-9,-11,-21,-64,-30,-27,127, 
  /* [35][0][][] */ 65,-4,4,-22,-17,28,-64,-23,-19,-127,-42,9,-8,-23,37,-4, 
  /* [36][0][][] */ -11,-4,-127,-39,33,123,4,20,0,-9,53,52,12,8,-90,76, 
  /* [37][0][][] */ 31,34,36,-58,56,-127,68,-1,-96,80,-69,3,28,37,99,42, 
  /* [38][0][][] */ -24,127,16,-32,23,8,71,-77,12,-22,-105,54,-46,-80,-67,7, 
  /* [39][0][][] */ 75,40,-127,-122,-26,-13,5,-64,0,-8,11,-31,58,4,-103,-59, 
  /* [40][0][][] */ -40,-1,-55,-104,-43,-12,10,-127,-5,-4,10,-45,46,64,31,67, 
  /* [41][0][][] */ -34,-101,-15,127,9,-21,-58,-4,6,-53,60,-63,-70,-13,0,21, 
  /* [42][0][][] */ -11,63,-31,-127,12,18,0,-12,55,0,-30,13,70,-22,-19,12, 
  /* [43][0][][] */ 1,46,4,12,127,32,17,32,5,42,5,-75,-125,-48,-4,-15, 
  /* [44][0][][] */ 73,-15,7,34,-24,-8,21,45,33,-46,26,13,127,8,-55,-29, 
  /* [45][0][][] */ 19,-111,-76,30,-48,-117,24,70,59,-39,3,33,-102,127,23,-48, 
  /* [46][0][][] */ -36,-85,55,73,0,5,-111,27,27,-28,40,-30,40,75,67,127, 
  /* [47][0][][] */ -39,-59,19,75,9,2,52,20,15,-52,-127,-53,50,-41,-60,25, 
  /* [48][0][][] */ -67,95,-24,-12,-3,61,-3,-124,38,-15,34,-36,45,-127,-39,12, 
  /* [49][0][][] */ -45,18,40,-40,3,20,127,109,-16,-21,-4,23,-28,29,-45,14, 
  /* [50][0][][] */ 62,27,-102,23,24,-127,-45,25,-84,71,-45,3,7,-85,-126,-65, 
  /* [51][0][][] */ -60,52,-40,105,-26,43,-32,-93,-31,-76,0,-41,14,47,-11,127, 
  /* [52][0][][] */ -126,19,24,7,35,51,81,-9,24,-92,-55,-47,-92,-46,-127,-22, 
  /* [53][0][][] */ -28,-56,-63,-127,-32,-9,-15,81,19,-59,-43,34,-37,30,70,67, 
  /* [54][0][][] */ 13,-47,-3,-13,-64,54,50,-25,-10,-72,37,25,-24,-17,-127,33, 
  /* [55][0][][] */ -28,-44,-47,27,61,-11,62,90,-63,-60,-127,-31,76,-28,-31,47, 
  /* [56][0][][] */ 68,-43,-43,-43,-112,2,-127,-4,-5,-14,-38,-4,75,-54,20,9, 
  /* [57][0][][] */ -51,19,25,-49,114,44,44,42,-24,77,-2,-10,-57,93,-127,-39, 
  /* [58][0][][] */ 45,17,2,-15,44,2,-48,-73,60,-127,-76,5,-88,-55,-32,52, 
  /* [59][0][][] */ -60,-30,-3,25,6,39,-89,-28,62,127,-73,21,-25,15,-2,7, 
  /* [60][0][][] */ 10,-61,-8,17,-127,-41,43,-9,7,56,-14,61,14,-26,42,54, 
  /* [61][0][][] */ 20,41,-85,13,-36,-20,-127,-94,-17,21,30,99,91,-47,124,50, 
  /* [62][0][][] */ 61,-4,46,-38,-24,58,34,127,-75,104,30,78,42,48,76,96, 
  /* [63][0][][] */ 17,-119,-3,5,-63,12,39,-43,-26,-34,4,-6,-46,127,108,43, 
  /* [64][0][][] */ -19,-10,-127,-31,2,43,27,-11,1,-78,53,-1,62,-35,-74,107, 
  /* [65][0][][] */ -21,-13,42,63,52,-17,76,77,-38,3,-127,-42,35,113,-72,-9, 
  /* [66][0][][] */ -51,-125,-30,-127,-55,-110,56,-35,3,-45,20,65,-89,-53,-87,113, 
  /* [67][0][][] */ -27,-90,-87,-13,-108,127,-33,-120,-97,-27,-45,-110,-3,-33,-57,41, 
  /* [68][0][][] */ 112,22,65,-35,-61,8,-96,-50,-97,-127,-40,-14,53,-50,46,-56, 
  /* [69][0][][] */ 25,-5,34,-18,-7,-55,-20,32,-1,127,-16,23,4,26,68,-6, 
  /* [70][0][][] */ 44,0,-44,90,-106,26,-3,-91,97,127,29,42,39,-39,-6,26, 
  /* [71][0][][] */ 127,-70,73,86,-78,-48,59,-35,127,-3,-48,45,77,-57,23,12, 
  /* [72][0][][] */ -9,-40,47,88,49,2,-127,62,73,10,41,12,-39,-68,-66,68, 
  /* [73][0][][] */ 65,18,60,-127,68,-58,-70,43,-3,114,-19,29,14,-75,26,-29, 
  /* [74][0][][] */ 77,10,26,22,-127,-26,56,-16,-68,-44,10,-55,38,-72,-17,30, 
  /* [75][0][][] */ 90,127,-121,10,68,68,-10,-9,-5,-34,67,79,-120,71,57,101, 
  /* [76][0][][] */ -85,-57,-9,-62,-55,-7,99,4,-61,28,92,33,-52,-127,-37,102, 
  /* [77][0][][] */ -79,127,-21,-6,-57,-97,68,98,70,-91,-55,102,-36,63,-11,89, 
  /* [78][0][][] */ 127,61,-74,46,-69,52,-92,-24,4,-12,-64,8,32,-78,15,60, 
  /* [79][0][][] */ -81,-56,114,74,-55,-118,-61,-68,-16,37,14,5,-80,127,-61,99, 
  /* [80][0][][] */ 48,87,17,-127,-15,36,95,-27,12,12,-36,18,91,-52,7,0, 
  /* [81][0][][] */ 49,-56,40,-103,123,62,-41,127,113,39,-8,-52,-33,8,-98,-107, 
  /* [82][0][][] */ 70,46,78,-4,127,-77,17,51,1,110,-30,21,-16,-34,31,-119, 
  /* [83][0][][] */ -42,63,1,-2,65,75,127,62,16,28,-47,-65,-69,99,-65,-74, 
  /* [84][0][][] */ 11,-84,-15,94,8,-110,-77,40,-102,56,-67,-30,-127,71,-3,-66, 
  /* [85][0][][] */ -88,73,-54,7,-44,-22,-30,-58,-3,57,23,-56,-127,-58,-52,58, 
  /* [86][0][][] */ -37,35,71,73,26,-14,59,-11,-17,0,-45,-71,40,84,-127,-42, 
  /* [87][0][][] */ -22,42,127,-17,-98,-31,17,15,27,-29,8,44,-61,14,-14,-5, 
  /* [88][0][][] */ -34,-61,-123,39,36,45,16,1,4,-90,-109,-82,127,-9,24,53, 
  /* [89][0][][] */ 15,20,12,-127,-5,-59,-49,50,117,-20,35,-91,-20,-32,50,-67, 
  /* [90][0][][] */ 10,72,11,12,-48,36,43,107,0,-62,-25,127,53,19,-32,84, 
  /* [91][0][][] */ -54,-1,-38,57,76,66,-21,-127,-29,22,-14,13,-87,-111,-63,1, 
  /* [92][0][][] */ -17,105,3,-13,-127,9,-111,54,-55,89,119,85,-27,-9,94,-15, 
  /* [93][0][][] */ 106,48,100,54,-127,-92,10,28,-22,-55,-31,-67,20,-54,-5,0, 
  /* [94][0][][] */ -41,-127,19,-97,10,44,-15,-7,84,-20,13,52,13,67,-43,56, 
  /* [95][0][][] */ -48,-74,-31,-65,126,104,-39,62,108,55,-60,72,-49,127,-96,61, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0016116983024403453, 0.0015675098402425647, 0.0023412490263581276, 0.002510027727112174, 0.0019439790630713105, 0.0010757097043097019, 0.0015434840461239219, 0.0027875800151377916, 0.0023372669238597155, 0.0013488391414284706, 0.0029693616088479757, 0.0020629486534744501, 0.0023312612902373075, 0.0024957847781479359, 0.0023340710904449224, 0.0019243133720010519, 0.0026456082705408335, 0.00151516601908952, 0.0021828494500368834, 0.0021816578228026628, 0.0028578676283359528, 0.0012435127282515168, 0.0013608644949272275, 0.002163546159863472, 0.0024927272461354733, 0.0026822045911103487, 0.00094900024123489857, 0.0019264528527855873, 0.0024150258395820856, 0.0016958112828433514, 0.0013949009589850903, 0.0021783742122352123, 0.0014653119724243879, 0.0032505192793905735, 0.0024083438329398632, 0.0025141199585050344, 0.0022521510254591703, 0.0020072008483111858, 0.0030262668151408434, 0.0023597502149641514, 0.0024638308677822351, 0.0037616691552102566, 0.0036920164711773396, 0.0027761328965425491, 0.0036462326534092426, 0.0024141964968293905, 0.0021892192307859659, 0.0020773715805262327, 0.0021078907884657383, 0.0034082620404660702, 0.0016530003631487489, 0.001926765195094049, 0.0020284298807382584, 0.0029089807067066431, 0.0030288659036159515, 0.0022346365731209517, 0.002822530921548605, 0.00220708386041224, 0.0015084093902260065, 0.0029258797876536846, 0.0030804574489593506, 0.0016349139623343945, 0.0019307114416733384, 0.002145522041246295, 0.0017619061982259154, 0.0017248427029699087, 0.0017346353270113468, 0.0020356897730380297, 0.0019102784572169185, 0.00294257584027946, 0.0015751497121527791, 0.0023384355008602142, 0.0022185118868947029, 0.001841212622821331, 0.002559188287705183, 0.0014905977295711637, 0.002615820849314332, 0.002337845740839839, 0.0024088739883154631, 0.001729327836073935, 0.0026737523730844259, 0.0016272243810817599, 0.0011181131703779101, 0.0024456512182950974, 0.0018360452959313989, 0.002295300830155611, 0.0024741522502154112, 0.0033767691347748041, 0.00082701107021421194, 0.0026836786419153214, 0.0030375996138900518, 0.0028009810484945774, 0.00088445114670321345, 0.002456161892041564, 0.0036754128523170948, 0.0022488096728920937, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -29388, -10318, 2298, -16865, 9594, -14698, 21981, -6799, 8680, -10085, 13473, 14013, -3718, -33077, 1823, 6649, };
const TfArray<16, float> quant14_scale = { 16, { 7.3277078627143055e-05, 6.8291308707557619e-05, 8.0014928244054317e-05, 6.7827189923264086e-05, 0.00010533760359976441, 0.00015202740905806422, 4.2067080357810482e-05, 8.31388751976192e-05, 0.00011686443031067029, 0.00011192358942935243, 9.2733280325774103e-05, 6.928916263859719e-05, 9.0401161287445575e-05, 7.6393778726924211e-05, 8.620964945293963e-05, 9.6414863946847618e-05, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 21,39,15,18,-25,-79,-14,0,-17,-86,12,-4,63,-71,62,40,-71,-30,36,16,85,15,-70,20,0,84,127,79,8,76,49,-28,-6,3,11,-6,36,22,2,-5,117,25,16,-20,-2,-3,17,-39,33,-31,103,-11,-58,4,40,22,3,-45,7,17,-12,29,-56,-26,21,0,68,24,2,-27,17,30,10,31,10,36,54,-20,51,24,-11,40,35,42,-63,11,-13,60,24,12,-104,-26,21,14,125,63, 
  /* [1][0][][] */ 14,48,-59,-27,-8,-41,87,-60,-51,-41,-44,-35,-12,-33,1,-33,-9,-37,-35,-6,-8,-93,96,-8,2,29,-6,69,-58,20,-49,21,-45,24,14,18,-9,52,-42,76,30,6,-3,-40,69,-50,-11,43,-69,7,44,-111,-26,48,59,49,36,30,-67,13,-52,10,-1,-32,35,31,102,1,-45,-127,5,24,20,50,-14,21,-40,-9,104,-19,44,-12,51,-39,-21,-47,-5,7,-17,-39,25,11,61,-44,-32,57, 
  /* [2][0][][] */ 0,-8,14,-27,57,45,-47,37,-43,38,21,-28,34,-9,19,33,39,-30,-127,-3,-7,-50,-11,16,6,-12,-48,19,-33,-12,-31,75,-15,-33,1,17,-32,27,-15,-15,51,15,0,40,18,50,-1,-3,-72,12,-19,-2,-5,36,14,-65,44,6,53,36,-15,-7,-14,45,31,8,-46,-8,-7,5,-24,-23,13,42,35,67,-47,-12,-32,-27,35,30,51,-9,-9,-45,-3,-51,-13,-30,-4,77,3,-12,76,-27, 
  /* [3][0][][] */ 38,-29,-20,-122,-15,-29,127,-16,43,110,-77,-15,8,-26,-21,85,75,40,-15,22,-60,20,17,16,-44,97,45,-7,-67,1,-62,73,3,-13,42,-15,18,-62,-11,77,13,12,-29,37,71,-55,7,39,40,-27,47,-43,116,48,15,-14,17,-18,-15,-44,-42,32,72,-14,-18,-16,108,-56,-41,-27,-57,31,19,-80,16,-64,18,-40,117,-1,-12,-54,-31,-33,-41,-45,91,69,-42,46,-65,7,2,-82,-15,43, 
  /* [4][0][][] */ -31,64,23,14,-7,18,-28,-8,19,-29,14,-6,18,41,-21,29,-12,-40,-11,-62,28,-29,-65,28,-20,-31,-24,21,-37,127,-43,-10,7,-30,8,-21,58,44,-29,4,25,0,11,-25,-41,-10,57,-15,18,-17,-49,-15,-60,35,36,25,-2,66,-27,11,-25,-55,-25,-2,58,19,-57,-24,8,-10,14,-47,-18,56,60,63,-30,10,-54,36,19,65,24,-52,45,-53,-24,-66,-41,-48,-48,0,5,4,32,-19, 
  /* [5][0][][] */ -1,-12,37,-14,-7,-13,-14,8,40,3,-16,-4,-17,-25,22,-29,-6,1,-61,-29,-18,18,-26,27,24,-37,61,-13,-5,36,15,72,-17,-79,10,1,-41,-33,-24,-3,-40,-4,-23,12,6,20,-67,22,-21,27,51,-3,28,-60,3,24,-30,-51,1,-38,33,34,25,41,-37,3,109,-21,-10,-28,8,25,-2,30,31,6,-7,-7,127,35,-30,-10,-24,32,40,61,-2,91,1,-30,-15,15,13,-6,-26,22, 
  /* [6][0][][] */ 33,-77,61,28,-35,127,-50,-95,-31,-83,-92,83,18,18,-51,101,7,52,24,-36,-83,-17,-99,-59,15,-49,-26,80,-117,59,-10,-37,33,94,-10,-1,-17,-61,19,-12,-51,32,33,-27,18,41,-102,-16,64,11,-88,-111,83,24,-42,-26,28,-11,17,-23,-16,-36,30,-13,60,-107,-52,-82,-84,1,4,-75,-38,-114,12,-121,92,22,-70,51,-32,75,23,-92,75,-51,-22,-10,-85,71,-93,99,54,-66,79,-91, 
  /* [7][0][][] */ -16,-14,-68,55,-25,6,18,-4,-88,6,70,47,4,-60,-6,-31,-6,-2,8,7,-49,-21,-37,-58,70,32,1,64,23,14,22,23,-40,-127,31,99,-13,1,-45,16,-4,-18,0,-78,16,47,64,70,7,37,-34,-14,13,-26,32,-55,-11,45,-67,-15,63,1,0,-42,64,-55,108,-28,-43,-20,73,10,-18,-24,-78,-20,31,-39,89,-31,0,-23,-70,-30,28,4,-65,38,2,7,10,18,53,-15,74,-10, 
  /* [8][0][][] */ -2,-57,7,9,-7,-6,27,-3,-3,-11,34,44,11,34,-47,-4,58,15,9,7,-9,-66,-44,-14,-36,-22,59,7,-28,51,21,-19,-24,10,3,0,-43,-22,21,-19,-1,42,24,-30,18,-9,28,-11,26,-8,48,6,3,9,-37,8,-25,95,-63,-7,-17,-59,-49,-13,-74,-32,-13,9,-9,9,34,-15,-28,-127,45,-101,11,11,-48,18,-26,-5,8,58,66,-61,-45,51,-42,90,6,-12,-43,3,7,-54, 
  /* [9][0][][] */ -21,-22,-19,10,-1,17,4,32,-28,-6,52,47,-25,49,17,-41,-7,31,-26,-39,2,37,-13,18,-21,31,-1,11,21,-3,20,-1,-17,-21,6,55,-16,-8,26,6,-8,-27,12,4,16,41,6,45,-45,17,-13,31,127,9,-12,0,24,-12,30,14,-30,6,82,7,21,32,50,-1,24,-5,-25,29,4,-118,-32,-108,-22,-7,28,-4,-10,25,14,-30,37,11,-53,-7,-3,99,27,41,54,30,-5,33, 
  /* [10][0][][] */ 26,43,9,-4,-14,10,-53,-27,52,6,-37,28,25,7,-9,-62,-31,4,9,0,29,-14,-13,-36,18,-21,-94,38,-7,35,-7,3,15,12,-29,8,15,0,1,-2,39,-11,63,-49,-39,-2,15,22,23,16,3,-25,-27,-16,3,25,-4,7,-6,5,-7,-34,-11,7,-8,-16,-74,-16,-42,-13,47,-9,-24,26,20,17,53,-13,-87,15,-10,29,4,-1,-4,6,-68,-127,-21,19,11,17,56,-33,16,26, 
  /* [11][0][][] */ 36,-46,-3,21,-60,28,2,-4,67,-30,-27,-41,32,17,24,-21,-36,72,26,-72,7,32,10,-29,36,24,70,1,47,-79,-34,14,12,117,-112,16,8,-30,57,1,-40,58,-8,8,-64,9,-9,-5,61,-34,-43,-15,-20,22,-80,106,-35,10,-11,-37,22,-2,-3,-82,-8,-66,-127,-86,4,-40,-104,39,64,17,-26,-7,31,64,-114,-52,-23,-13,-24,-13,-28,-1,54,88,19,-52,-2,-7,-39,39,105,25, 
  /* [12][0][][] */ 21,27,-23,-21,6,-27,4,42,44,-37,22,7,2,-4,-7,22,6,-30,-25,13,16,40,3,56,-24,-24,-127,-1,62,-18,19,3,-29,-73,57,5,32,-22,6,18,1,-56,15,31,41,-3,24,-12,-58,8,-51,92,70,-11,20,-64,18,20,-35,-27,12,49,70,-4,-16,-23,28,15,111,15,32,23,-4,-17,-19,-12,-25,-33,38,-54,18,-48,24,-23,1,6,3,-105,1,30,-38,22,10,59,16,37, 
  /* [13][0][][] */ -21,13,-81,30,27,26,-11,22,29,69,-32,55,-47,-23,55,-36,4,59,66,22,-27,-48,0,19,61,50,-24,29,7,48,56,-9,-15,73,6,50,13,-47,-47,-46,10,-23,10,27,43,45,-29,42,-47,52,18,5,-19,-27,51,40,22,-38,-7,-8,32,32,0,-30,20,73,127,21,38,-16,-38,-8,36,63,-71,59,20,-63,118,-35,-12,-44,22,17,24,49,-26,-26,-12,-30,7,62,44,6,61,68, 
  /* [14][0][][] */ -9,50,20,13,-62,-51,13,39,-75,-32,69,20,-79,-16,67,-7,-49,45,-46,22,-28,5,-90,15,-39,8,-56,-115,6,-4,16,78,-49,26,21,2,-18,-79,-11,-33,28,-39,42,-20,-17,54,-65,37,-6,-43,93,15,-8,39,-29,23,-39,30,0,47,42,59,2,46,23,-56,2,-81,42,50,73,41,-44,34,15,16,31,-7,35,28,-70,104,-6,-127,69,-13,8,2,-96,-19,-18,-7,-28,5,33,25, 
  /* [15][0][][] */ 76,-43,23,39,47,10,-10,-24,12,47,-67,-21,79,69,-7,-32,-20,16,-74,55,10,-26,24,7,66,-60,97,27,62,-37,-40,62,68,58,-2,-88,51,68,53,47,89,43,-12,-4,-50,-127,31,-45,-26,-35,-29,-3,-21,-56,-25,67,-29,5,-6,18,15,-56,-44,30,25,41,-73,49,2,-20,0,-8,-10,-114,-53,-105,-29,4,-117,26,82,-35,34,14,-45,-6,-12,-10,37,87,33,-75,-33,-40,28,-45, 
};
const TfArray<16, float> quant15_scale = { 16, { 0.0031142756342887878, 0.0029023804236203432, 0.0034006345085799694, 0.0028826554771512747, 0.0044768480584025383, 0.0064611649140715599, 0.0017878508660942316, 0.0035334019921720028, 0.0049667381681501865, 0.0047567524015903473, 0.0039411643519997597, 0.0029447893612086773, 0.003842049278318882, 0.0032467355486005545, 0.003663910087198019, 0.0040976316668093204, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 8596, 892, -7530, 7354, -1343, -1173, 1599, -702, 1865, -4011, 1720, -3397, 7885, -3068, -2344, -4323, 1093, -264, -6832, -1035, -2104, 932, -5479, -939, 3, 7242, -8973, -4631, 83, -3084, 2195, -270, 18770, 52, -1929, 195, -1228, 12569, 5158, 7820, 2391, 6321, -1442, 6483, 950, 1681, 12999, 4827, -5789, -33, -3553, 702, 0, -3017, -1029, 2172, -980, 4179, 418, -143, -1790, 1013, 1311, 12313, 11687, -320, 15338, 16358, -252, -1055, 10133, -1305, 393, 1616, -2226, -297, 19435, 7787, 11564, 14443, 15918, -1756, 7474, 9537, -1279, -183, 9065, -6127, 11061, -535, -8123, -1364, -349, 1020, 20048, 1108, };
const TfArray<96, float> quant16_scale = { 96, { 0.00011860403174068779, 0.00035454501630738378, 0.00015015307872090489, 0.00016050232807174325, 0.00023940099345054477, 0.00048904080176725984, 0.00011120455019408837, 0.00019799110305029899, 0.00031060454784892499, 0.00026232190430164337, 0.00024188043607864529, 0.00020695543207693845, 0.00012856720422860235, 0.00013131603191141039, 0.00024303529062308371, 0.00022167252609506249, 0.00034099130425602198, 0.00032219290733337402, 0.00018660259956959635, 0.00036399142118170857, 0.00025627692230045795, 0.0002319648046977818, 9.9374759884085506e-05, 0.00017471348110120744, 0.0019909853581339121, 0.00019419001182541251, 0.000236185995163396, 0.00015222190995700657, 0.00035722015309147537, 0.00018610592815093696, 0.00014610237849410623, 0.00032323782215826213, 6.2808947404846549e-05, 0.00048082231660373509, 0.00017587908951099962, 0.00021483250020537525, 0.00041938730282709002, 0.00012353605416137725, 0.00015365982835646719, 0.00011847447603940964, 0.00045558827696368098, 0.000199468107894063, 0.00023353472352027893, 0.00014877122885081917, 0.00016645569121465087, 0.00031833891989663243, 0.00013668497558683157, 0.00023239008442033082, 0.0001873480505309999, 0.00044151110341772437, 0.00024850689806044102, 0.00018803891725838184, 0.00017917822697199881, 0.00029111935873515904, 0.00027026975294575095, 0.0002907846646849066, 0.00019157474162057042, 0.00035827612737193704, 0.00049525976646691561, 0.00037722600973211229, 0.00026387014077045023, 0.00026926663122139871, 0.00016653105558361858, 7.4148461862932891e-05, 0.00022092131257522851, 0.00038491454324685037, 0.00010510596621315926, 0.00011723072384484112, 0.00020443269750103354, 0.00035938291694037616, 0.00010883023060159758, 0.00030277715995907784, 0.00049921241588890553, 0.00018019885465037078, 0.00018443721637595445, 0.00021629614639095962, 6.059473889763467e-05, 0.00015285318659152836, 0.00011381796502973884, 0.00012319724191911519, 9.5297422376461327e-05, 0.00028672028565779328, 0.00011000021186191589, 0.00026974451611749828, 9.2467264039441943e-05, 0.00029685677145607769, 0.00014200656733009964, 0.00023515229986514896, 0.0001014585213852115, 0.00023830463760532439, 0.00010651748743839562, 0.00026963790878653526, 0.00033208300010301173, 0.00014836296031717211, 0.00010510702122701332, 0.00028820236911997199, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -31,-13,1,-47,92,-5,17,-12,1,1,-20,-5,-16,5,-6,-28,-23,10,-34,-9,6,22,9,60,-4,6,-39,6,24,-3,21,1,-51,4,-6,-27,0,-15,-50,-1,-4,-43,33,-22,-14,32,-79,-24,-32,-1,-1,53,-79,5,25,-14,15,-16,4,-5,-5,-19,1,-98,-29,-13,-34,-13,-17,30,-3,1,28,-3,-8,1,8,3,127,-30,-100,12,-113,-24,-18,-24,24,4,-11,-16,20,-36,-1,23,-34,1, -17,27,58,-23,-46,-1,127,-54,3,-11,-44,18,-37,6,-81,72,-12,80,48,-32,1,127,125,127,24,-10,59,83,127,32,127,-28,-102,-20,-54,-40,-17,-92,127,-52,-35,-127,-7,-72,65,-28,-47,-10,37,-17,33,127,-95,48,-80,-3,-69,-9,-9,34,1,-127,-127,-65,-67,-1,-8,-89,-18,22,-61,115,-127,-13,13,-23,-127,-38,0,-101,-127,16,26,-78,120,68,-45,53,-127,2,44,-6,5,121,-75,-103, -24,-13,-6,-57,63,-3,33,-27,-14,13,-19,10,-6,0,-5,-26,-16,3,-33,-17,-3,8,18,49,-1,-4,3,-8,10,4,8,9,-38,6,-11,63,-5,-39,-50,25,-15,34,21,2,-28,-38,-69,-25,-22,-2,4,39,15,-10,-1,-7,58,-28,5,-9,-9,-14,-58,-44,-45,-25,127,-28,-7,27,-12,16,24,10,-9,12,-5,41,-36,-29,-71,1,-127,-26,12,-31,25,-17,-24,-32,10,47,3,35,-36,3, 
  /* [0][1][][] */ -85,-14,67,-84,54,105,-52,-26,1,-10,-33,-6,-127,27,17,68,-24,38,89,25,33,-24,110,-18,33,24,60,8,-13,2,-14,-22,-127,-14,45,-14,-3,-127,-85,-127,-27,-32,92,-38,-74,127,-127,-100,64,68,17,-47,-127,86,77,-38,25,-35,39,1,14,-18,66,-118,-39,21,-27,-117,-10,-1,-127,18,60,127,-8,-68,-103,-62,-69,-62,-94,-3,-15,-62,40,15,-104,51,-68,127,127,-76,127,17,-68,-13, 50,127,127,127,-127,-127,108,-70,127,127,-77,-68,-87,127,-23,127,127,-127,127,127,127,-90,105,-111,-127,-127,127,127,-118,127,-35,127,-79,127,127,-111,127,30,-21,-8,127,-7,-127,-127,127,-23,116,127,127,-127,127,-119,102,127,-127,127,-127,127,-127,127,-86,111,81,-127,127,127,-13,123,-117,-127,-23,-127,9,113,127,69,12,-127,105,-127,34,127,110,127,127,71,-127,127,-124,52,-3,-16,-85,-14,-127,-42, -127,-38,49,-102,15,60,-58,1,-34,-15,-10,127,-114,22,21,50,-27,50,81,12,22,-29,93,-29,37,11,41,4,-21,-12,13,-15,-82,-29,70,127,4,-98,-123,-59,-42,-14,34,-32,-78,-79,-111,-126,46,81,0,-24,126,33,106,-50,91,-34,54,-31,8,-37,-124,-30,-78,-7,-55,-127,-23,12,-107,5,30,-100,-8,127,-92,-47,-58,-10,-114,-13,-44,-82,-18,27,-97,43,-55,-71,120,127,-35,-10,-88,-18, 
  /* [0][2][][] */ 2,-42,5,20,47,13,-11,16,-14,15,30,-11,67,9,1,-61,-11,-5,-29,-22,-24,-14,48,-9,14,-36,-12,-8,-1,0,-39,3,-18,-2,4,-17,1,-20,-13,-14,-32,11,38,12,32,6,-56,-21,-24,7,-26,-22,-7,-43,33,-11,30,-27,3,-16,11,19,0,-90,-31,-30,124,11,23,24,-13,-7,-20,-18,-21,-29,-38,11,-44,-36,-55,0,-95,-8,16,-16,26,-27,-32,1,-16,-14,-16,-21,-13,-13, -29,-67,65,-94,-35,11,43,127,-58,64,127,-29,-39,19,127,56,-17,-36,56,-47,-37,-41,127,14,21,-10,35,17,-10,19,-116,-47,-62,-33,-89,1,-75,-117,63,-56,-32,-118,-32,127,29,-39,-58,-19,38,0,-15,-16,54,29,-55,-37,-45,-63,36,-51,127,30,97,-75,-84,-55,-21,-107,127,32,-64,12,13,-27,38,-15,-45,-46,5,36,-114,-19,-68,-75,65,-127,3,7,-68,-2,35,-5,9,-127,-60,127, -29,-1,14,29,32,4,1,21,-26,10,9,38,67,3,-4,-55,-12,7,-9,-27,-20,-9,35,-7,9,-33,-11,-15,-8,12,-48,0,-1,6,-4,-14,-2,-40,-25,10,-42,7,20,6,10,-11,-44,0,-16,3,-20,-14,-7,-35,33,-16,76,-10,7,-20,14,17,-8,-43,-30,-36,-35,-21,18,13,-41,-9,-59,-45,-14,-3,-42,1,121,-38,-65,-5,-61,-12,-8,-7,47,9,-31,5,-34,12,-4,-28,-18,-16, 
};
const TfArray<96, float> quant17_scale = { 96, { 0.0050406712107360363, 0.01506816316395998, 0.0063815056346356869, 0.0068213487975299358, 0.010174541734158993, 0.020784234628081322, 0.0047261933796107769, 0.008414621464908123, 0.01320069283246994, 0.011148680932819843, 0.01027991808950901, 0.0087956059724092484, 0.0054641058668494225, 0.0055809309706091881, 0.010328999720513821, 0.0094210822135210037, 0.014492129907011986, 0.013693198561668396, 0.007930610328912735, 0.015469634905457497, 0.010891769081354141, 0.0098585039377212524, 0.0042234272696077824, 0.007425322663038969, 0.084616877138614655, 0.0082530751824378967, 0.010037904605269432, 0.0064694308675825596, 0.015181856229901314, 0.0079095019027590752, 0.006209351122379303, 0.013737606815993786, 0.0026693802792578936, 0.020434947684407234, 0.0074748611077666283, 0.0091303810477256775, 0.0178239606320858, 0.0052502821199595928, 0.0065305423922836781, 0.0050351652316749096, 0.019362501800060272, 0.0084773944690823555, 0.0099252257496118546, 0.0063227768987417221, 0.0070743667893111706, 0.013529404066503048, 0.0058091115206480026, 0.009876578114926815, 0.0079622920602560043, 0.018764222040772438, 0.010561543516814709, 0.0079916538670659065, 0.0076150745153427124, 0.012372571974992752, 0.01148646418005228, 0.01235834788531065, 0.0081419264897704124, 0.015226735733449459, 0.021048540249466896, 0.016032105311751366, 0.011214480735361576, 0.011443831026554108, 0.0070775696076452732, 0.0031513094436377287, 0.0093891555443406105, 0.016358867287635803, 0.0044670035131275654, 0.0049823056906461716, 0.0086883893236517906, 0.015273773111402988, 0.0046252845786511898, 0.012868029065430164, 0.021216526627540588, 0.0076584508642554283, 0.0078385816887021065, 0.0091925859451293945, 0.0025752764195203781, 0.0064962604083120823, 0.0048372633755207062, 0.0052358824759721756, 0.004050140269100666, 0.012185611762106419, 0.0046750088222324848, 0.011464142240583897, 0.0039298585616052151, 0.012616412714123726, 0.0060352790169417858, 0.0099939722567796707, 0.0043119871988892555, 0.010127946734428406, 0.0045269932597875595, 0.011459610424935818, 0.014113527722656727, 0.0063054254278540611, 0.0044670482166111469, 0.012248600833117962, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant6_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1065, 4798, 211, 1899, 4391, 9416, 117, 1541, 12350, -899, 15688, 2506, 1919, 391, 3194, -134, 2676, 2064, -233, 7968, 819, 7705, -1151, 1167, -6409, 1441, 2151, 1035, 4201, 596, 2786, 2391, 1471, 7594, 2393, 3845, 3617, 1515, 2693, 1481, 19997, 1263, 1856, 1005, 3325, 7496, 7073, 9572, 1299, -649, 1363, 5283, 2193, -1875, 5029, 275, 1708, 7742, 1375, 1184, 1977, 5851, 2670, -798, 14228, 6729, 1426, 2191, 4496, 3131, 1325, 1182, -3030, 3766, 1403, 2412, 69, 6397, 3269, 5689, 1830, 766, 2467, 9630, -530, 7842, 4436, 1375, -633, 1722, 938, 6911, 2046, 1932, 4111, 5341, };
const TfArray<96, float> quant18_scale = { 96, { 0.00031774863600730896, 0.0001614814973436296, 0.00032845148234628141, 0.00021310769079718739, 0.00016337804845534265, 9.6832867711782455e-05, 0.00024635673617012799, 0.0001830786932259798, 7.15382702765055e-05, 0.00017532143101561815, 5.8079993323190138e-05, 0.00020440806110855192, 0.00019967621483374387, 0.00045678275637328625, 0.00015845589223317802, 0.00021286618721205741, 0.00022909484687261283, 0.00029730689129792154, 0.00028563590603880584, 0.00011237663420615718, 0.00032055546762421727, 0.000101995981822256, 0.00023715439601801336, 0.0002429063169984147, 0.00011223903129575774, 0.00015774085477460176, 0.00023436291667167097, 0.00030080060241743922, 0.00019409619562793523, 0.0003304583951830864, 0.00021769903833046556, 0.0002172926178900525, 0.00031542344368062913, 0.00010717700934037566, 0.0002020237734541297, 0.00017326381930615753, 0.00016350166697520763, 0.00028929670224897563, 0.0001730390649754554, 0.00024804656277410686, 4.9760205001803115e-05, 0.00022919922776054591, 0.00018853848450817168, 0.00017988611944019794, 0.00013160464004613459, 0.00011689888196997344, 0.00010410916729597375, 8.4412364230956882e-05, 0.0002472233900334686, 0.00029079537489451468, 0.00028243835549801588, 0.00013917800970375538, 0.00021986149658914655, 0.00020490758470259607, 0.00014205995830707252, 0.00033380484092049301, 0.00017502278205938637, 0.00011794681631727144, 0.00015222404908854514, 0.00021715136244893074, 0.00021165520593058318, 0.00014475673378910869, 0.00022712181089445949, 0.00018756614008452743, 6.9643232563976198e-05, 0.0001268085470655933, 0.00028817667043767869, 0.00027043442241847515, 0.00017615020624361932, 0.00016019438044168055, 0.00033428924507461488, 0.00018326261488255113, 0.00017386516265105456, 0.00017272781406063586, 0.00022983034432400018, 0.00025175680639222264, 0.00026917867944575846, 0.00011621107114478946, 0.00019004997739102691, 0.00015286568668670952, 0.00023867718118708581, 0.00019091588910669088, 0.00019738079572562128, 9.3642396677751094e-05, 0.00012983330816496164, 9.2842761659994721e-05, 0.00016677389794494957, 0.00028385553741827607, 0.00031127172405831516, 0.00030500729917548597, 0.00019708085164893419, 0.00011939512478420511, 0.00024771620519459248, 0.00021340178500395268, 0.00014414610632229596, 0.00012975060963071883, } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 57,15,12,70,-127,-25,90,46,71,104,-33,28,6,-15,32,71, 
  /* [1][0][][] */ -22,18,-66,5,127,99,-14,17,-24,20,-67,35,-50,70,-61,-44, 
  /* [2][0][][] */ -45,55,80,0,82,94,12,50,36,-7,34,-22,65,-127,-10,11, 
  /* [3][0][][] */ 127,-30,18,-15,61,46,-10,11,35,51,-80,-27,-38,64,-43,69, 
  /* [4][0][][] */ -87,-20,31,52,-123,-17,-115,-32,-15,54,-16,-84,-35,42,-58,127, 
  /* [5][0][][] */ -111,19,41,15,127,41,21,4,-65,19,-26,11,-61,54,-101,-37, 
  /* [6][0][][] */ -127,30,-29,29,-11,-80,82,3,11,-33,-67,45,19,2,-38,14, 
  /* [7][0][][] */ 14,115,76,-127,67,67,118,-14,59,26,-3,19,103,15,-46,-20, 
  /* [8][0][][] */ -35,-14,-81,55,-64,88,-42,-93,50,-39,99,29,127,62,-109,2, 
  /* [9][0][][] */ -9,-127,-16,118,-52,-82,-32,65,52,54,7,74,-98,5,5,-34, 
  /* [10][0][][] */ -27,-46,-90,63,-127,103,30,-109,-12,-39,79,-32,24,121,-69,83, 
  /* [11][0][][] */ -46,-90,-44,22,19,88,23,-4,15,27,36,-80,7,96,-127,93, 
  /* [12][0][][] */ -18,-91,-55,102,-87,-127,12,63,79,78,-49,103,10,-71,-30,-20, 
  /* [13][0][][] */ -74,-22,-46,-6,-16,10,37,16,-18,127,1,-27,40,35,15,-3, 
  /* [14][0][][] */ -64,-20,-27,-43,-7,71,-24,-106,127,-39,63,-19,74,-40,-90,-103, 
  /* [15][0][][] */ -12,-127,84,-66,-69,-36,19,55,5,-67,-85,-9,105,-22,-26,-32, 
  /* [16][0][][] */ -27,-29,19,-39,28,29,-13,-34,56,-127,37,-18,1,7,-71,-82, 
  /* [17][0][][] */ -41,-3,26,-61,8,2,-34,13,67,-61,47,85,127,-63,-29,-117, 
  /* [18][0][][] */ 53,5,-36,-127,-9,-15,106,-70,27,49,-11,48,-3,56,1,-107, 
  /* [19][0][][] */ -44,-26,-35,-67,-94,46,-14,-10,28,-43,12,-127,-25,-14,-37,-6, 
  /* [20][0][][] */ 10,73,62,-88,78,1,-54,104,-113,-127,44,-89,-48,109,-25,-12, 
  /* [21][0][][] */ -3,-80,-127,-12,103,37,108,78,-73,-86,-22,18,95,-89,-32,25, 
  /* [22][0][][] */ 57,-4,84,3,-8,8,62,32,19,126,56,37,-15,5,127,6, 
  /* [23][0][][] */ -127,-43,-24,40,45,55,25,-5,-8,1,12,-97,-24,60,42,115, 
  /* [24][0][][] */ 27,-20,50,45,2,-96,4,-50,20,127,-103,82,-35,-65,94,-67, 
  /* [25][0][][] */ 127,-47,107,108,45,7,-14,4,-110,96,61,-31,6,22,73,-7, 
  /* [26][0][][] */ -28,27,8,44,-66,126,-14,42,-71,-44,-79,34,1,27,47,-127, 
  /* [27][0][][] */ 30,-14,-19,-62,-54,13,-79,15,-119,-31,-71,-57,-79,52,-34,127, 
  /* [28][0][][] */ -48,30,21,13,21,-18,-127,5,12,-29,4,-15,1,-62,-54,-38, 
  /* [29][0][][] */ -23,-116,-28,101,-36,4,127,1,73,53,-106,72,38,-17,-39,80, 
  /* [30][0][][] */ 38,-47,-42,15,-127,12,45,-21,3,2,10,-7,-22,40,0,72, 
  /* [31][0][][] */ -127,-10,-1,93,-44,12,-46,-1,-28,-61,10,-34,-30,-63,-29,99, 
  /* [32][0][][] */ -127,-75,-101,-25,-89,-32,6,-16,103,55,-46,-63,40,32,15,-11, 
  /* [33][0][][] */ -22,11,-89,38,-127,-123,60,-6,-119,35,-72,-73,-34,117,80,67, 
  /* [34][0][][] */ 54,66,13,56,-82,-59,29,17,33,-127,-30,42,-23,-19,44,80, 
  /* [35][0][][] */ 39,-9,-76,-12,-127,7,103,-23,22,48,-19,-11,33,74,31,56, 
  /* [36][0][][] */ -4,12,-62,58,127,-24,49,65,-93,18,-93,-90,25,-23,16,32, 
  /* [37][0][][] */ -109,51,3,-78,57,-84,-47,-44,6,-6,-29,61,62,-81,11,-127, 
  /* [38][0][][] */ 67,114,28,-60,-98,-68,-127,-62,-28,-65,54,70,-59,-104,80,-15, 
  /* [39][0][][] */ 16,-38,20,79,11,76,68,-61,-4,68,16,-8,0,127,51,100, 
  /* [40][0][][] */ 116,50,113,127,-47,-71,2,18,-93,97,-17,-28,-42,-38,121,-11, 
  /* [41][0][][] */ -25,-13,14,57,-107,116,-6,53,-63,28,-121,21,17,31,70,-127, 
  /* [42][0][][] */ 5,-102,2,-27,127,39,91,3,-20,-123,-93,1,12,-1,-10,65, 
  /* [43][0][][] */ -23,-86,-42,5,83,12,-6,65,-76,-66,-107,-71,127,-12,-58,49, 
  /* [44][0][][] */ -55,-53,-53,-99,16,64,61,-4,-42,-127,-72,69,-44,47,33,110, 
  /* [45][0][][] */ -4,-54,-65,2,-127,69,-39,-70,57,-34,41,-41,6,-3,-37,37, 
  /* [46][0][][] */ 29,-84,-14,24,89,-99,-41,105,-19,-13,62,97,-64,-53,81,-127, 
  /* [47][0][][] */ -110,-47,-26,73,-32,35,58,33,-9,127,101,102,-46,103,-18,122, 
  /* [48][0][][] */ 40,-6,-89,-100,35,-64,17,50,47,-85,-7,25,-48,10,-37,-127, 
  /* [49][0][][] */ 47,48,7,44,-7,-30,52,53,-40,127,-41,21,-41,-33,61,83, 
  /* [50][0][][] */ 6,9,8,6,-127,-9,-8,-52,57,16,23,44,-22,-60,8,7, 
  /* [51][0][][] */ 6,7,2,-127,-35,75,68,-51,16,2,42,-34,64,92,-17,14, 
  /* [52][0][][] */ 12,-35,-7,-102,98,-116,-13,-33,41,-4,127,-70,48,3,-51,115, 
  /* [53][0][][] */ -73,-78,42,-46,-39,-120,55,-98,-23,87,-127,95,-7,1,20,-100, 
  /* [54][0][][] */ 78,72,26,-6,-127,-42,-69,-101,-10,3,33,55,-71,-53,66,14, 
  /* [55][0][][] */ 13,5,-23,68,-26,8,34,-8,1,127,11,51,3,15,5,46, 
  /* [56][0][][] */ 48,-124,-96,95,-100,23,-1,79,127,10,45,62,-8,-38,79,121, 
  /* [57][0][][] */ 58,38,94,-65,65,10,-35,-1,75,-25,38,127,56,-74,108,-48, 
  /* [58][0][][] */ 81,-69,17,-91,48,46,-29,127,58,116,-22,51,63,-3,88,-3, 
  /* [59][0][][] */ -26,41,18,-22,6,-84,-8,6,8,17,-94,-81,-127,-68,61,-12, 
  /* [60][0][][] */ 55,-42,46,33,-7,-22,4,-42,18,127,-18,83,-3,-19,-3,-27, 
  /* [61][0][][] */ 76,54,17,-21,-73,-127,-14,-58,-51,-13,-33,4,-51,-45,85,66, 
  /* [62][0][][] */ -32,67,-40,35,-55,127,-48,10,-67,5,-44,31,-17,38,64,-85, 
  /* [63][0][][] */ 48,8,-79,-127,-28,-69,102,-23,-7,-112,-37,46,-29,103,43,-51, 
  /* [64][0][][] */ -48,26,6,-38,53,-53,27,74,-127,-4,-64,-24,-14,79,56,66, 
  /* [65][0][][] */ -65,-15,-49,-17,71,30,-41,-76,-102,-53,15,-40,-127,97,-72,29, 
  /* [66][0][][] */ -12,59,-14,37,-50,127,-20,20,-53,8,-30,35,-31,45,53,-77, 
  /* [67][0][][] */ 8,-23,-48,-47,19,-84,66,-110,0,38,-8,118,-63,-37,-42,-127, 
  /* [68][0][][] */ 6,-127,-37,79,-17,4,26,82,34,33,66,24,-69,49,-1,3, 
  /* [69][0][][] */ 20,89,117,-94,36,-9,-45,95,35,99,58,107,120,-112,56,-127, 
  /* [70][0][][] */ 45,33,49,-28,90,5,-94,-65,-127,-94,-1,54,-19,72,-100,-3, 
  /* [71][0][][] */ -27,-65,28,-64,72,-15,35,22,-78,85,-127,-32,16,79,-18,56, 
  /* [72][0][][] */ 7,1,59,20,-47,-23,-113,-47,-19,78,-20,76,21,127,-111,6, 
  /* [73][0][][] */ 12,-41,-4,-35,44,-127,19,-42,83,107,112,0,14,-29,-75,121, 
  /* [74][0][][] */ -2,-4,-35,79,-72,0,96,23,64,51,20,104,127,31,-51,20, 
  /* [75][0][][] */ -31,45,-19,44,-50,127,-24,22,-32,32,-44,57,-17,56,30,-65, 
  /* [76][0][][] */ -72,92,-39,73,-127,-28,-11,26,41,45,-41,-52,79,-28,-126,61, 
  /* [77][0][][] */ 117,127,-125,114,77,78,88,67,45,11,102,-20,93,51,52,15, 
  /* [78][0][][] */ 14,-24,-1,-54,52,-105,41,-63,38,34,127,-25,15,-18,-42,122, 
  /* [79][0][][] */ -46,53,-7,13,-2,-37,-31,2,-127,-8,49,-1,94,37,-80,-33, 
  /* [80][0][][] */ -70,25,84,-13,76,52,-11,-127,-58,79,-71,-30,-11,-85,18,46, 
  /* [81][0][][] */ 87,73,-17,-7,30,-28,78,127,-100,117,-63,-33,-31,26,108,109, 
  /* [82][0][][] */ 41,127,-40,-65,-28,-39,95,-97,27,16,-41,68,98,-23,56,-37, 
  /* [83][0][][] */ 11,-26,2,6,6,32,-15,-107,65,-36,81,20,49,-51,-66,-127, 
  /* [84][0][][] */ -127,-97,-37,5,-16,88,108,-6,82,67,108,127,78,115,-76,20, 
  /* [85][0][][] */ 115,5,96,-67,87,-3,-23,89,43,127,-47,4,-69,70,114,4, 
  /* [86][0][][] */ -69,64,-26,-4,29,77,6,23,90,46,127,-38,-40,41,-3,-33, 
  /* [87][0][][] */ 10,-56,25,-48,47,-127,26,-39,48,-9,69,-34,40,-39,-45,74, 
  /* [88][0][][] */ -66,64,45,-5,100,-33,33,1,-52,-62,71,-53,87,118,86,-127, 
  /* [89][0][][] */ -28,29,-6,31,-19,127,-12,31,-42,12,-35,10,-14,54,27,-80, 
  /* [90][0][][] */ 57,-81,29,48,127,-8,47,33,-22,-127,-107,-40,-20,-20,-53,45, 
  /* [91][0][][] */ -10,75,-22,-29,-7,-95,-80,55,-90,27,-86,-112,-127,-48,-18,34, 
  /* [92][0][][] */ 72,35,56,35,-127,-84,16,27,-33,34,-17,-15,-27,-70,43,7, 
  /* [93][0][][] */ -7,-107,-104,45,-38,-51,5,127,105,60,18,81,-67,63,-26,-32, 
  /* [94][0][][] */ 90,9,112,-9,29,-40,0,40,16,88,5,56,12,5,127,-1, 
  /* [95][0][][] */ -70,-53,-39,-40,127,12,41,72,-49,-6,-94,-73,34,21,-89,34, 
};
const TfArray<96, float> quant19_scale = { 96, { 0.0044938097707927227, 0.0022837773431092501, 0.0046451766975224018, 0.003013908863067627, 0.0023105996660888195, 0.0013694739900529385, 0.0034841385204344988, 0.0025892190169543028, 0.0010117412311956286, 0.002479510847479105, 0.00082140538142994046, 0.0028908730018883944, 0.0028239521197974682, 0.0064601218327879906, 0.0022409872617572546, 0.0030104934703558683, 0.0032400097697973251, 0.0042047090828418732, 0.0040396503172814846, 0.0015893041854724288, 0.0045335059985518456, 0.0014424941036850214, 0.0033539931755512953, 0.0034353407099843025, 0.0015873580705374479, 0.0022308747284114361, 0.0033145141787827015, 0.0042541194707155228, 0.0027450358029454947, 0.0046735596843063831, 0.003078842768445611, 0.0030730948783457279, 0.0044609252363443375, 0.0015157676534727216, 0.0028571528382599354, 0.0024504107423126698, 0.0023123479913920164, 0.004091423936188221, 0.0024472321383655071, 0.0035080371890217066, 0.00070374150527641177, 0.0032414859160780907, 0.0026664349716156721, 0.0025440675672143698, 0.0018612392013892531, 0.0016532607842236757, 0.0014723802451044321, 0.0011938150273635983, 0.0034963954240083694, 0.00411261897534132, 0.0039944285526871681, 0.001968346768990159, 0.0031094255391508341, 0.0028979375492781401, 0.0020091051701456308, 0.0047208871692419052, 0.0024752870667725801, 0.0016680812695994973, 0.0021528524812310934, 0.0030710971914231777, 0.002993366913869977, 0.0020472446922212839, 0.0032121057156473398, 0.0026526835281401873, 0.00098494032863527536, 0.0017934098141267896, 0.0040755835361778736, 0.0038246610201895237, 0.0024912317749112844, 0.0022655741777271032, 0.0047277379781007767, 0.0025918202009052038, 0.0024589153472334146, 0.0024428302422165871, 0.0032504117116332054, 0.0035605099983513355, 0.0038069016300141811, 0.0016435332363471389, 0.0026878116186708212, 0.0021619268227368593, 0.0033755293115973473, 0.0027000578120350838, 0.0027914887759834528, 0.0013243522262200713, 0.0018361879047006369, 0.0013130432926118374, 0.0023586258757859468, 0.0040144715458154678, 0.00440220907330513, 0.0043136132881045341, 0.0027872468344867229, 0.001688564196228981, 0.003503365209326148, 0.0030180681496858597, 0.0020386087708175182, 0.0018350182799622416, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -2460, 11003, -19438, 986, 9782, -14313, -41227, -7760, -6545, 5812, -14867, -12815, 5407, -11860, -2909, -3949, };
const TfArray<16, float> quant20_scale = { 16, { 0.00013260691775940359, 0.00015040396829135716, 0.00016224001592490822, 0.00024042898439802229, 9.3367161753121763e-05, 0.00019070734560955316, 0.00010529194696573541, 0.00013342342572286725, 0.00010702949657570571, 0.00012080364831490442, 0.00015194775187410414, 0.00014574869419448078, 0.00016361480811610818, 9.6247262263204902e-05, 0.00010691831266740337, 0.00011461667600087821, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 25,27,19,-35,64,64,-39,57,-15,113,-1,43,-42,41,-18,46,31,80,33,-61,-74,75,-10,48,54,47,32,48,-48,-48,-8,83,-33,17,-71,48,49,-127,-36,14,20,-34,64,-7,-5,-59,-64,-17, 
  /* [1][0][][] */ -51,-3,-80,-48,6,88,-55,15,-10,-35,-46,36,57,-11,-31,-23,-31,-31,-5,19,-72,50,-114,-45,-53,-38,51,64,-22,-31,44,-41,11,-64,-39,54,16,-59,127,-36,-23,35,-47,-15,36,52,32,24, 
  /* [2][0][][] */ -2,2,55,-32,-16,-77,19,27,101,73,-66,9,107,-39,127,83,-71,-16,-32,24,81,-82,-33,-81,14,-35,44,-69,38,40,-41,21,29,-27,64,40,-72,3,1,-18,33,29,64,-16,18,-80,92,-56, 
  /* [3][0][][] */ 42,7,-25,-18,28,106,10,-11,40,-44,26,-19,-44,0,4,48,-31,-65,42,-117,-1,7,-32,-22,-35,85,127,60,-14,-42,25,44,60,-35,86,42,-36,-63,8,36,27,13,-13,-11,22,15,-7,-18, 
  /* [4][0][][] */ 95,-3,6,-43,85,80,52,2,68,-14,-101,32,46,-22,23,-12,-91,-115,-14,-97,-16,31,-42,-36,-79,127,-94,115,-60,-45,23,83,44,-49,7,-26,0,16,-20,36,-49,-10,-8,52,-48,105,-27,-51, 
  /* [5][0][][] */ -1,-6,-55,5,-20,49,22,-27,59,52,42,88,44,-21,34,-6,-41,127,-8,34,12,-1,-61,-19,32,0,-66,-39,-15,22,19,-18,-37,-2,42,11,-44,10,-84,-3,84,-20,23,48,-21,10,-39,27, 
  /* [6][0][][] */ 69,26,10,78,-4,-33,96,-58,7,68,127,92,44,37,-47,61,53,-49,-66,97,60,-56,-35,50,-79,85,86,-10,105,53,-37,-7,99,-58,-124,0,100,38,7,-9,9,51,55,-38,64,120,42,-2, 
  /* [7][0][][] */ -92,1,-28,23,-65,-59,22,53,90,114,-59,-75,-107,15,-21,-10,-85,100,-5,123,-54,41,21,42,-15,-98,-28,-88,36,33,-10,3,-9,21,14,-15,10,-62,127,11,8,37,17,-17,50,66,-27,2, 
  /* [8][0][][] */ -10,-90,50,-56,62,-54,65,-43,-25,-105,29,13,-27,-6,31,31,6,7,-29,95,9,42,-21,24,65,-7,-57,-26,-127,-14,-50,-103,0,-68,-2,88,-8,30,105,14,10,-4,63,105,-8,-64,-41,81, 
  /* [9][0][][] */ 9,-33,21,-72,35,83,-37,59,14,-25,-40,-25,12,-43,126,-21,-10,-117,45,41,-66,40,58,-32,-33,-74,-26,82,58,86,-45,-20,-60,24,2,127,-34,-46,-55,-20,-32,1,44,111,55,88,-68,16, 
  /* [10][0][][] */ -11,12,-20,-15,25,29,-61,-44,48,35,60,-4,-40,-9,53,-50,-68,127,4,54,-9,-13,16,30,-47,44,1,94,38,6,-31,-11,71,3,-16,24,-9,-46,-48,19,-82,-2,28,-13,15,39,25,35, 
  /* [11][0][][] */ -30,51,-24,40,23,58,-2,15,15,16,-127,-73,73,10,-12,-46,3,26,-39,-45,-8,-11,114,1,44,4,-17,33,-10,25,-6,52,26,1,-42,-1,39,81,102,13,32,-30,73,-1,-56,-19,87,3, 
  /* [12][0][][] */ -66,-5,28,25,-70,-60,5,-5,-39,-33,-127,12,77,-100,22,28,59,107,101,-123,-27,44,-40,-88,-10,-19,31,-32,5,26,-15,77,57,84,38,-35,-66,-21,37,-7,-39,11,59,-8,43,-9,-37,-39, 
  /* [13][0][][] */ -50,-115,-53,-104,-1,18,61,4,-118,25,126,-71,55,36,127,10,127,22,3,-96,87,-75,121,-6,-79,3,-24,4,-39,-106,-121,10,60,-28,-80,69,37,-56,85,-83,-13,61,57,37,56,-34,114,-65, 
  /* [14][0][][] */ 64,20,-50,2,-39,16,-91,-23,-19,58,48,40,-18,-58,6,-40,48,-116,13,15,80,-53,22,3,-4,127,-81,0,-56,-33,-94,-3,126,46,90,-12,-78,6,-24,65,-9,-42,104,-30,-52,-49,-58,60, 
  /* [15][0][][] */ -65,18,40,21,101,4,1,38,25,83,-13,57,50,-10,-39,-23,12,40,-1,-34,30,-44,-49,-52,55,-63,-36,71,-25,2,15,4,-57,3,127,-4,-93,15,62,-16,-51,-20,17,-4,-28,-31,-8,7, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.005635793786495924, 0.0063921683467924595, 0.0068952003493905067, 0.010218231938779354, 0.0039681042544543743, 0.008105061948299408, 0.004474907647818327, 0.005670495331287384, 0.0045487536117434502, 0.0051341550424695015, 0.0064577790908515453, 0.0061943195760250092, 0.0069536291994154453, 0.004090508446097374, 0.0045440280809998512, 0.0048712086863815784, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 12870, 109, 21764, 1098, 19520, -1160, 41926, 396, 8548, 45336, 5975, 26950, 2466, 8825, 42098, 24163, 1436, 967, 3285, 46652, 1441, 19306, 1701, 16539, 15926, 32399, 890, -209, -1141, 12889, 24270, -189, 1744, -2523, 1978, 18148, 9111, 31866, 4001, 15462, 23310, 1540, 1061, 14434, 1132, 2223, 44564, 28709, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.8289111368358135e-05, 8.4706640336662531e-05, 6.0025307902833447e-05, 0.00014759297482669353, 0.00010934322926914319, 8.4741725004278123e-05, 4.1625924495747313e-05, 0.00026710622478276491, 0.00010271491191815585, 4.0704075217945501e-05, 4.9711117753759027e-05, 0.00010596823267405853, 6.5323780290782452e-05, 0.00013466741074807942, 4.1132265323540196e-05, 7.1059177571441978e-05, 0.00010792020475491881, 5.9333440731279552e-05, 0.00013994956680107862, 4.9971473345067352e-05, 6.8058725446462631e-05, 5.8631627325667068e-05, 0.00010313985694665462, 0.00010946093243546784, 6.4546213252469897e-05, 7.272258517332375e-05, 5.6369870435446501e-05, 4.0714705392019823e-05, 0.00027791637694463134, 0.00011967696627834812, 6.5150212321896106e-05, 0.00031684318673796952, 9.8236341727897525e-05, 0.00016041670460253954, 8.1779791798908263e-05, 7.1051348641049117e-05, 0.00010348319483455271, 5.8801095292437822e-05, 7.8373275755438954e-05, 0.00010135614138562232, 5.6225318985525519e-05, 0.00019015464931726456, 0.00032878940692171454, 7.4055642471648753e-05, 0.00015328296285588294, 5.0730126531561837e-05, 3.9933434891281649e-05, 5.5968477681744844e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -96,61,-127,105,-107,50,-47,99,-78,-51,77,-66,58,-57,-55,-38,91,87,79,-118,94,-125,76,-90,-69,-53,74,127,-83,-67,-107,61,71,-89,62,-127,-79,-123,77,-42,-9,-90,123,-72,97,62,-71,-68, -114,88,-92,116,-72,107,-43,100,-127,-72,116,-87,91,-86,-70,-79,94,115,127,-127,111,-127,95,-119,-109,-81,97,125,36,-89,-124,107,99,-127,101,-118,-101,-127,93,-71,-90,93,127,-64,-38,98,-92,-77, -60,36,-9,33,-17,79,-19,17,-53,-32,61,-40,56,-23,-29,-11,52,46,63,-53,33,-78,33,-60,-80,-40,26,38,91,-40,-61,29,29,-65,35,-41,-20,-25,38,-54,-103,-46,32,-33,-71,62,-38,-69, 
  /* [0][1][][] */ -98,80,-85,127,-88,111,-112,106,-95,-98,93,-96,98,-98,-111,-89,114,100,-40,-110,110,-101,112,-84,-96,-88,93,105,-127,-73,-97,95,106,44,99,-99,-93,-121,108,-68,-79,-110,121,-127,127,78,-97,-99, -127,127,-119,126,-127,127,-127,127,-112,-127,127,-127,127,-127,-127,-127,127,127,-45,-109,127,-119,127,-127,-127,-127,127,121,12,-127,-127,127,127,48,127,-95,-127,-111,127,-127,-127,127,116,-109,-61,127,-127,-127, -74,90,-102,40,-54,56,-67,27,-44,-52,59,-71,48,-61,-52,-24,78,57,-41,-30,48,-47,57,-50,-103,-51,49,52,89,-57,-69,58,51,30,56,-55,-35,-28,66,-64,-69,-66,50,-57,-97,89,-35,-104, 
  /* [0][2][][] */ -56,55,6,55,-59,61,-76,53,-38,-45,21,-53,54,-67,-62,-61,85,41,-82,-40,27,-34,36,-26,-32,-38,32,7,-81,-52,-42,41,36,61,47,-68,-22,-78,42,-28,-86,-56,49,-79,78,51,-43,-48, -70,66,-99,68,-82,61,-85,62,-44,-51,46,-76,75,-71,-85,-66,89,57,-98,-40,25,-29,46,-55,-61,-56,46,37,6,-85,-79,77,46,83,59,-70,-54,-72,44,-32,-55,72,61,-108,-31,82,-57,-73, -31,38,-91,13,-43,25,-60,46,-1,-29,22,-35,43,-41,-37,1,60,26,-70,-7,19,-1,23,-13,-37,-14,23,18,57,-38,-29,29,9,56,29,-42,-11,-15,31,-10,11,-12,13,-42,-47,66,-14,-72, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0029022872913628817, 0.0036000320687890053, 0.0025510755367577076, 0.0062727010808885098, 0.0046470873057842255, 0.0036015233490616083, 0.0017691018292680383, 0.011352014727890491, 0.0043653836473822594, 0.001729923184029758, 0.0021127224899828434, 0.0045036496594548225, 0.0027762604877352715, 0.0057233651168644428, 0.0017481212271377444, 0.0030200150795280933, 0.0045866086147725582, 0.0025216711219400167, 0.0059478566981852055, 0.0021237875334918499, 0.0028924958314746618, 0.0024918441195040941, 0.0043834438547492027, 0.0046520894393324852, 0.0027432141359895468, 0.0030907096806913614, 0.0023957195226103067, 0.0017303748754784465, 0.011811446398496628, 0.0050862710922956467, 0.0027688839472830296, 0.013465834781527519, 0.0041750445961952209, 0.0068177101202309132, 0.0034756411332637072, 0.003019682364538312, 0.004398035816848278, 0.0024990465026348829, 0.0033308640122413635, 0.004307636059820652, 0.0023895760532468557, 0.0080815721303224564, 0.013973549008369446, 0.0031473645940423012, 0.0065145259723067284, 0.0021560303866863251, 0.00169717101380229, 0.0023786602541804314, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 1566, -922, 898, -2089, 4252, -842, 4034, -2944, 1145, 579, 2431, 4062, 249, -476, 477, 4270, -2140, 3662, 5170, 557, -618, 1593, -806, 3535, 2169, 1440, 1363, -899, 6592, -307, 3171, -1890, -464, 3516, -659, 1746, 1470, 1145, 209, 3810, 1723, 7253, -3775, 1191, 5566, 26, 2507, 2526, };
const TfArray<48, float> quant24_scale = { 48, { 0.00025472210836596787, 0.00037275161594152451, 0.00028165907133370638, 0.00023175806563813239, 0.00019241344125475734, 0.00020987735479138792, 0.00019206263823434711, 0.00017810390272643417, 0.00029846810502931476, 0.00029384437948465347, 0.00018147850641980767, 0.00019170639279764146, 0.00042561916052363813, 0.00032668205676600337, 0.00029279955197125673, 0.00017781571659725159, 0.00025395900593139231, 0.00021643360378220677, 0.00017351728456560522, 0.00037780601996928453, 0.00038300480809994042, 0.0003453601966612041, 0.00021581260079983622, 0.00022718613035976887, 0.00023544105351902544, 0.00026546968729235232, 0.00026776027516461909, 0.00025885825743898749, 0.00013343642058316618, 0.00028694278444163501, 0.0001716361875878647, 0.00018192647257819772, 0.00023896009952295572, 0.00021462321456056088, 0.000307504553347826, 0.00027861856506206095, 0.00029442633967846632, 0.00023164533195085824, 0.00024249394482467324, 0.00020801239588763565, 0.00028137493063695729, 0.00012335524661466479, 0.00015119204181246459, 0.00035590137122198939, 0.00015493827231694013, 0.00033125228947028518, 0.00021769723389297724, 0.00024179095635190606, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 58,32,127,-35,64,107,-67,-46, 
  /* [1][0][][] */ 10,-86,-127,-3,48,27,34,0, 
  /* [2][0][][] */ -127,-4,-39,-22,55,18,-72,-36, 
  /* [3][0][][] */ 35,78,127,-72,-3,-118,-20,-6, 
  /* [4][0][][] */ -127,20,-45,-27,40,12,-42,-55, 
  /* [5][0][][] */ -89,25,-54,-7,16,43,-77,-127, 
  /* [6][0][][] */ -41,-127,-119,52,111,20,4,49, 
  /* [7][0][][] */ -56,-127,-87,-72,-60,-71,27,81, 
  /* [8][0][][] */ 81,26,-1,-7,81,-74,-127,9, 
  /* [9][0][][] */ -33,61,-58,96,-58,-48,127,-28, 
  /* [10][0][][] */ -27,123,29,66,127,-27,-10,59, 
  /* [11][0][][] */ -78,-31,-30,-10,-82,101,127,-6, 
  /* [12][0][][] */ 66,38,-127,31,-10,-35,-69,-8, 
  /* [13][0][][] */ 76,-29,-79,15,18,-127,-33,-16, 
  /* [14][0][][] */ 8,-82,74,19,127,-113,-75,18, 
  /* [15][0][][] */ -42,-39,1,127,60,66,-69,27, 
  /* [16][0][][] */ 97,17,-29,10,62,-108,-127,-18, 
  /* [17][0][][] */ 53,127,52,77,45,58,25,-81, 
  /* [18][0][][] */ 30,-12,4,-4,127,0,25,-14, 
  /* [19][0][][] */ 14,127,35,9,-116,17,17,-30, 
  /* [20][0][][] */ -39,11,64,-127,20,35,-18,106, 
  /* [21][0][][] */ -40,60,32,-127,27,40,-1,97, 
  /* [22][0][][] */ -75,-75,-99,23,-121,127,119,-22, 
  /* [23][0][][] */ 95,43,-127,26,14,-39,-68,-12, 
  /* [24][0][][] */ -43,43,6,16,-25,67,-127,98, 
  /* [25][0][][] */ -112,-54,-127,14,-55,-69,67,105, 
  /* [26][0][][] */ 51,-4,-42,-38,124,-16,127,-38, 
  /* [27][0][][] */ 127,-70,24,90,3,25,-13,84, 
  /* [28][0][][] */ 49,72,59,-7,127,-63,46,-24, 
  /* [29][0][][] */ -14,-8,-30,-49,-74,6,127,-41, 
  /* [30][0][][] */ 39,-127,-64,-61,-94,-1,20,-53, 
  /* [31][0][][] */ 7,24,-9,-11,-127,9,-28,-12, 
  /* [32][0][][] */ 46,-53,-62,86,-4,-89,110,-127, 
  /* [33][0][][] */ 53,127,49,25,56,-41,-15,-27, 
  /* [34][0][][] */ -116,-33,127,-9,-21,93,92,11, 
  /* [35][0][][] */ -40,77,127,-27,-85,-74,-39,27, 
  /* [36][0][][] */ -87,4,99,-20,-19,127,82,22, 
  /* [37][0][][] */ -23,-84,-9,-127,-42,-85,79,51, 
  /* [38][0][][] */ 47,-12,87,-61,61,50,-127,9, 
  /* [39][0][][] */ -19,90,-127,-43,-22,8,7,82, 
  /* [40][0][][] */ 63,-52,21,30,10,6,3,127, 
  /* [41][0][][] */ -24,102,127,-14,17,80,-53,41, 
  /* [42][0][][] */ 52,-127,-111,-23,-114,12,21,-85, 
  /* [43][0][][] */ -7,-88,23,-68,127,-41,20,37, 
  /* [44][0][][] */ -12,127,103,12,6,62,-61,-1, 
  /* [45][0][][] */ -35,49,11,73,-113,53,-127,23, 
  /* [46][0][][] */ -44,-45,68,50,-127,-109,-31,-5, 
  /* [47][0][][] */ -5,46,41,-107,-127,42,-13,53, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0027303842362016439, 0.0039955507963895798, 0.0030191235709935427, 0.0024842310231178999, 0.0020624932367354631, 0.0022496902383863926, 0.0020587330218404531, 0.0019091083668172359, 0.003199300728738308, 0.003149738535284996, 0.0019452809356153011, 0.002054914366453886, 0.0045622419565916061, 0.003501727944239974, 0.0031385391484946012, 0.0019060192862525582, 0.0027222046628594398, 0.0023199671413749456, 0.0018599440809339285, 0.0040497295558452606, 0.0041054557077586651, 0.0037019404117017984, 0.0023133105132728815, 0.0024352241307497025, 0.0025237093213945627, 0.0028455883730202913, 0.0028701412957161665, 0.0027747200801968575, 0.001430314383469522, 0.0030757600907236338, 0.0018397804815322161, 0.0019500827183946967, 0.0025614302139729261, 0.0023005614057183266, 0.0032961629331111908, 0.0029865321703255177, 0.0031559767667204142, 0.0024830226320773363, 0.0025993096642196178, 0.002229699632152915, 0.0030160776805132627, 0.0013222536072134972, 0.0016206381842494011, 0.0038149319589138031, 0.0016607942525297403, 0.0035507166758179665, 0.0023335120640695095, 0.002591774333268404, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 2411, 441, 19891, -3782, 5263, -16350, 3352, -13102, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.051249799085781e-05, 0.00011636287672445178, 0.00014341023052111268, 0.00010406365618109703, 0.00015055379481054842, 0.00015167579113040119, 8.3745602751150727e-05, 9.689390572020784e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -44,-43,-16,-71,-1,-17,85,84,-103,-81,-30,1,-57,3,-58,38,-79,12,13,127,54,-14,10,92,79,72,26,-2,-87,-48,-74,-58,-46,97,27,-41,31,-25,86,-6,18,0,-1,-93,39,-38,-27,-72, 
  /* [1][0][][] */ -8,59,-25,-29,-72,53,-24,-48,-45,79,-13,17,48,48,-46,-9,-17,-119,71,-49,127,17,-62,19,58,-7,-85,62,43,-15,67,28,-31,-15,2,-9,-2,112,-20,-25,71,42,-11,12,110,14,-29,52, 
  /* [2][0][][] */ -19,-30,102,8,78,-43,-11,24,-37,6,-7,44,4,-35,-40,-127,-45,-96,-32,17,-97,23,-33,-34,-46,13,-6,-40,-35,10,-32,-12,1,-3,24,-4,18,-27,-45,9,38,-25,27,-41,-44,-35,-56,-49, 
  /* [3][0][][] */ 52,26,70,3,9,-29,17,72,-56,-23,45,-27,-73,49,-25,54,65,36,-24,27,-108,-63,127,-5,7,15,-64,-37,-51,66,119,-75,13,-116,-24,54,-9,-73,-24,68,-83,-64,67,-7,-94,-80,65,-5, 
  /* [4][0][][] */ 19,-14,69,-29,3,-11,-7,-6,-55,-4,-22,8,40,-76,31,-95,39,45,-9,-38,8,34,17,7,4,2,53,-14,24,26,-127,-18,-24,-19,7,15,47,-2,31,1,-39,-10,-66,20,-18,-90,7,21, 
  /* [5][0][][] */ 31,-49,62,36,39,20,31,-2,-68,-8,-52,36,37,2,16,-41,92,80,-1,-15,92,-56,127,-98,-25,49,6,52,9,12,-38,-52,-16,-52,-48,11,45,26,75,4,-71,37,32,28,49,-12,80,-3, 
  /* [6][0][][] */ -49,61,-121,95,43,32,35,12,-16,-19,50,-90,-101,-13,-28,21,-112,20,0,97,16,49,-89,-93,-7,-22,19,66,-33,-38,-53,11,43,69,-37,-34,-16,-21,87,13,78,62,-127,-53,-32,115,-53,-36, 
  /* [7][0][][] */ 29,58,-90,24,19,51,127,73,49,75,-95,8,-31,-4,-71,-46,29,36,109,99,77,-11,125,26,92,105,-48,99,-76,26,3,-60,11,-70,-28,24,-3,100,-62,73,-70,54,-2,-79,78,-21,43,-39, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0038467810954898596, 0.0049454220570623875, 0.006094934418797493, 0.0044227051548659801, 0.0063985362648963928, 0.0064462209120392799, 0.0035591879859566689, 0.0041179908439517021, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 390, 8746, -854, -1613, 2380, -1579, 1297, -2138, -3727, 438, -5162, -251, 258, -502, -1348, 4296, 8736, 2912, -265, -3342, -7271, 617, 17063, -3827, -4396, -705, 5946, -6876, -87, -465, -6705, 8630, 2935, 13, 2962, -185, 117, -429, 9874, 1616, 5780, -3289, 3576, 4708, -1301, 9178, 433, -2134, };
const TfArray<48, float> quant28_scale = { 48, { 0.00034703128039836884, 0.00018081559392157942, 0.00076412141788750887, 0.00026567437453195453, 0.00018859117699321359, 0.00026141369016841054, 0.00024625033256597817, 0.00030988897196948528, 0.0001174781282315962, 0.00028229391318745911, 0.00025996917975135148, 0.0020906280260533094, 0.00044524832628667355, 0.0010947434930130839, 0.00055437709670513868, 0.0007134071784093976, 0.00014392122102435678, 6.4809748437255621e-05, 0.00029021641239523888, 0.0003332857450004667, 0.0002371595473960042, 0.00022851015091873705, 8.9748384198173881e-05, 0.00048388389404863119, 0.00018874253146350384, 0.00047783029731363058, 0.00050264777382835746, 0.00020186491019558161, 0.00026599320699460804, 0.00044298349530436099, 0.00017140868294518441, 0.00011277764133410528, 0.00015214247105177492, 0.0002072904899250716, 0.0001913068990688771, 0.00041043234523385763, 0.0024533485993742943, 0.00048421320389024913, 0.00017271934484597296, 0.00021504276082850993, 0.00017943662533070892, 0.00012353633064776659, 0.00029999489197507501, 0.00019189498561900109, 0.00039517175173386931, 9.12488903850317e-05, 5.0573024054756388e-05, 0.00016028371464926749, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 12,-34,11,15,-23,-117,-40,44,-52,5,-10,15,46,-6,-20,5,91,12,21,1,6,-31,-70,12,-8,-17,-7,-22,-59,81,-18,-99,60,-9,-44,-51,-15,-33,9,-18,-25,45,10,-3,-12,69,127,-7, -127,-75,-22,127,-76,68,-95,127,17,16,18,2,54,19,-11,-42,-34,62,24,6,-2,123,7,127,127,-30,-46,43,67,-122,-16,-67,82,-3,-40,-119,22,11,-47,-51,-127,10,-89,-127,37,57,55,127, -25,6,13,13,-33,48,32,51,1,-38,-1,11,-24,-7,-8,5,-60,34,-62,-29,-7,-38,127,20,-37,5,8,0,18,51,2,10,11,-11,-51,79,1,11,15,64,25,-11,24,-24,-7,15,-23,-9, 
  /* [0][1][][] */ -2,-21,-26,7,30,-121,127,-74,-21,21,9,47,127,16,-8,-31,-16,-34,28,44,78,-74,38,6,-50,127,-81,-20,127,-92,45,-127,-33,0,-63,9,6,-64,-44,-3,117,127,12,-120,-65,-58,-5,90, 85,-127,127,9,127,63,-66,-42,25,127,127,-127,-95,127,127,127,127,127,119,127,127,121,0,5,120,-100,-127,127,33,127,127,0,-127,127,127,127,-127,127,-127,-127,43,41,-127,-38,127,-127,-13,94, 7,30,-39,3,-55,127,-118,111,106,-83,12,77,-39,8,13,-65,16,9,-127,10,23,-127,-35,-5,69,-14,-26,121,-80,-28,24,-36,-17,19,74,-27,33,2,-5,-97,113,2,32,50,-56,77,119,-83, 
  /* [0][2][][] */ 8,20,6,-22,-5,-71,-11,-16,10,3,-6,11,-16,-9,-9,-5,-44,16,11,-36,13,-20,81,-15,-96,7,40,-23,13,-3,-1,15,-4,-11,-51,36,-2,-15,12,34,-27,1,6,5,-20,24,-11,12, 35,-16,-34,-29,20,35,123,-103,127,-35,-11,15,-76,-19,-26,-70,-13,108,6,22,6,42,-24,-31,-55,59,79,-4,-96,0,-30,-19,-17,-2,-34,4,53,-22,-4,116,-120,5,-15,56,40,61,11,-120, -14,31,3,-14,-20,-4,-1,-52,-17,-29,-14,14,15,-6,-12,10,47,40,-24,-22,-13,-20,-46,-14,23,-26,24,-16,-20,3,-14,16,42,-11,-41,-52,-8,9,22,18,-6,-9,5,13,-15,10,78,-52, 
};
const TfArray<48, float> quant29_scale = { 48, { 0.014748829416930676, 0.0076846624724566936, 0.03247515857219696, 0.011291161179542542, 0.0080151250585913658, 0.01111008133739233, 0.010465638712048531, 0.013170280493795872, 0.0049928203225135803, 0.011997491121292114, 0.011048689484596252, 0.088851690292358398, 0.01892305351793766, 0.046526595950126648, 0.023561025038361549, 0.030319804325699806, 0.0061166519299149513, 0.0027544142212718725, 0.012334196828305721, 0.014164644293487072, 0.010079280473291874, 0.0097116809338331223, 0.0038143061101436615, 0.020565064623951912, 0.0080215577036142349, 0.020307786762714386, 0.021362530067563057, 0.0085792588070034981, 0.011304710991680622, 0.018826797604560852, 0.0072848689742386341, 0.0047930497676134109, 0.0064660548232495785, 0.008809845894575119, 0.0081305429339408875, 0.017443373799324036, 0.10426731407642365, 0.020579060539603233, 0.0073405723087489605, 0.009139317087829113, 0.0076260562054812908, 0.0052502937614917755, 0.012749782763421535, 0.008155536837875843, 0.016794798895716667, 0.0038780777249485254, 0.0021493535023182631, 0.0068120574578642845, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3397, 5758, 12090, 953, 1892, -1566, 4964, 20474, 3834, -675, 3492, -1751, 17523, -1428, 1872, 18483, -381, 1645, -22, 2024, 2973, 2438, 376, 21036, 5602, 2806, 12043, 1363, 4983, 4207, 453, 908, 1035, 1368, -408, 297, -2452, -489, 2297, 2123, 2632, 2440, 3655, 3967, 4101, 2640, 2060, 5244, };
const TfArray<48, float> quant30_scale = { 48, { 0.00020148050680290908, 0.00014789166743867099, 7.8648372436873615e-05, 0.00022888323292136192, 0.00026991023332811892, 0.00026809165137819946, 0.00015549139061477035, 4.9892318202182651e-05, 0.00014281962648965418, 0.00025875354185700417, 0.0002441704273223877, 0.00026727994554676116, 5.5890490330057219e-05, 0.00030766348936595023, 0.00026105513097718358, 5.8847545005846769e-05, 0.00038071704329922795, 0.00027654418954625726, 0.00034008102375082672, 0.00028917583404108882, 0.00022575557522941381, 0.0002916402299888432, 0.00040016748243942857, 5.1758088375208899e-05, 0.0001567634753882885, 0.00018858884868677706, 8.812536543700844e-05, 0.0002982975565828383, 0.00014786962128710002, 0.00018456736870575696, 0.00059336359845474362, 0.00042316594044677913, 0.00023109829635359347, 0.00025824550539255142, 0.00031354365637525916, 0.00033116582198999822, 0.00021916306286584586, 0.00029959357925690711, 0.00025392218958586454, 0.00025058237952180207, 0.00026723009068518877, 0.00021139670570846647, 0.00022785969485994428, 0.00020128890173509717, 0.00017708072846289724, 0.00025954132433980703, 0.0003093053528573364, 0.00016018259339034557, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 73,127,-71,-82,12,99,21,60, 
  /* [1][0][][] */ 53,-72,53,-127,-57,78,-83,-42, 
  /* [2][0][][] */ -31,127,111,39,105,-1,42,13, 
  /* [3][0][][] */ 117,53,-108,57,2,-120,-127,-39, 
  /* [4][0][][] */ -40,28,7,-64,-37,104,127,50, 
  /* [5][0][][] */ 21,79,-127,-78,43,87,30,-21, 
  /* [6][0][][] */ -2,127,79,72,74,16,27,-96, 
  /* [7][0][][] */ 127,-8,-26,22,22,9,102,21, 
  /* [8][0][][] */ 60,127,68,83,126,91,110,-101, 
  /* [9][0][][] */ 48,126,-127,-94,21,99,-5,74, 
  /* [10][0][][] */ -74,-42,21,-45,-8,-25,-49,127, 
  /* [11][0][][] */ 18,-112,-127,-12,19,-16,32,-7, 
  /* [12][0][][] */ -22,-99,-127,-38,-118,36,-49,40, 
  /* [13][0][][] */ -11,7,-99,98,-127,-26,-8,-12, 
  /* [14][0][][] */ -62,-43,-127,-9,41,-3,-14,-64, 
  /* [15][0][][] */ 28,-99,-127,31,-92,-34,-34,-9, 
  /* [16][0][][] */ 127,-60,-14,65,-79,21,31,93, 
  /* [17][0][][] */ -21,107,127,-21,-42,-4,-14,-29, 
  /* [18][0][][] */ 12,-127,52,71,-7,-76,43,-77, 
  /* [19][0][][] */ 127,-37,-54,43,-88,12,44,107, 
  /* [20][0][][] */ -31,-127,85,74,-18,-91,-2,-71, 
  /* [21][0][][] */ -7,-57,-15,-39,127,-4,51,24, 
  /* [22][0][][] */ -127,26,-78,40,43,50,-85,-103, 
  /* [23][0][][] */ -94,-43,64,5,-106,127,120,-47, 
  /* [24][0][][] */ -10,49,7,-39,-32,115,127,15, 
  /* [25][0][][] */ -31,-81,-127,-61,-42,-13,-22,-30, 
  /* [26][0][][] */ -15,66,-3,127,-88,38,-53,2, 
  /* [27][0][][] */ 20,-125,37,80,16,-55,7,-127, 
  /* [28][0][][] */ 30,127,58,52,105,-17,25,-62, 
  /* [29][0][][] */ 102,26,-24,-6,58,-127,-97,14, 
  /* [30][0][][] */ 26,-9,42,-127,25,-21,26,-23, 
  /* [31][0][][] */ 43,-31,9,57,-7,33,12,127, 
  /* [32][0][][] */ -81,-79,-2,-84,-73,127,54,86, 
  /* [33][0][][] */ -27,43,39,-34,43,127,-102,74, 
  /* [34][0][][] */ 33,127,-70,-60,17,40,-77,54, 
  /* [35][0][][] */ 22,-127,38,57,-18,-61,51,-74, 
  /* [36][0][][] */ -18,-37,-76,-9,-127,-53,-16,13, 
  /* [37][0][][] */ -41,-127,62,75,-46,-90,-18,-44, 
  /* [38][0][][] */ -72,15,59,-77,-127,-85,-59,80, 
  /* [39][0][][] */ 85,-127,75,50,-14,-79,-3,-102, 
  /* [40][0][][] */ 7,63,17,41,-127,-28,-64,21, 
  /* [41][0][][] */ 127,127,-99,-126,59,25,4,12, 
  /* [42][0][][] */ -6,-35,-13,18,127,9,47,19, 
  /* [43][0][][] */ 127,22,72,11,-78,-16,61,102, 
  /* [44][0][][] */ 87,41,-39,10,82,-122,-127,17, 
  /* [45][0][][] */ 60,7,11,7,89,-127,1,-69, 
  /* [46][0][][] */ 54,-37,-1,127,46,63,28,71, 
  /* [47][0][][] */ -85,-78,63,67,-43,21,127,-81, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0025683906860649586, 0.0018852622015401721, 0.0010025771334767342, 0.002917709294706583, 0.0034407046623528004, 0.0034175219479948282, 0.0019821403548121452, 0.0006360067636705935, 0.0018206058302894235, 0.0032984835561364889, 0.0031125841196626425, 0.0034071747213602066, 0.00071246898733079433, 0.0039219674654304981, 0.0033278234768658876, 0.00075016426853835583, 0.0048532243818044662, 0.0035252715460956097, 0.0043352129869163036, 0.0036862944252789021, 0.0028778391424566507, 0.0037177095655351877, 0.0051011703908443451, 0.00065979082137346268, 0.0019983563106507063, 0.002404052997007966, 0.0011233858531340957, 0.003802574472501874, 0.0018849810585379601, 0.0023527888115495443, 0.0075639546848833561, 0.00539434514939785, 0.0029459460638463497, 0.0032920076046139002, 0.0039969254285097122, 0.004221565555781126, 0.0027938005514442921, 0.0038190956693142653, 0.0032368956599384546, 0.003194320946931839, 0.0034065393265336752, 0.0026947981677949429, 0.0029046616982668638, 0.0025659480597823858, 0.0022573522292077541, 0.0033085260074585676, 0.0039428975433111191, 0.0020419417414814234, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7259, 16006, -4700, 6607, -13, 3810, -10455, -18304, };
const TfArray<8, float> quant32_scale = { 8, { 0.00024648243561387062, 0.0001149010713561438, 0.00015426853497046977, 0.00014163988817017525, 0.00017575242964085191, 0.00017553687212057412, 0.00025552418082952499, 0.00013907540414948016, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -42,-4,35,14,-33,-13,7,8,-42,-7,-61,-57,-25,-61,-12,-30,50,-39,39,38,-18,31,-42,18,-3,-34,53,-17,-7,-17,18,10,83,36,37,-127,17,1,-16,-32,4,-15,44,49,36,6,29,4, 
  /* [1][0][][] */ 6,41,64,-33,-10,45,-53,-24,4,29,-15,-96,11,98,-14,55,-23,27,-27,-55,13,-81,-25,25,-74,-18,-5,-113,-33,-18,31,-56,47,87,-48,4,127,-38,-4,56,-35,44,-86,-32,120,-19,-39,-31, 
  /* [2][0][][] */ 0,-17,-61,8,-1,50,28,6,-10,39,-4,26,64,-87,16,-59,33,-85,27,35,-25,53,-5,24,-15,58,-24,-65,13,1,15,-68,-46,-79,35,-29,104,18,-13,-58,0,26,77,29,127,14,22,23, 
  /* [3][0][][] */ -6,23,-64,43,11,-33,-73,-99,10,-18,-35,-1,8,28,34,81,-9,7,-38,21,9,-99,26,-56,-78,-11,127,-20,-44,4,-60,10,-2,-78,14,-12,-19,-39,-22,106,-51,-35,4,16,39,3,-38,40, 
  /* [4][0][][] */ -27,-48,-8,7,32,-25,-16,-10,27,-29,60,-79,2,30,8,12,-19,-26,14,-17,0,-56,3,-19,14,-10,41,48,32,17,-14,28,-9,-2,-1,-3,-70,87,36,-29,31,-22,-21,-25,-78,16,127,11, 
  /* [5][0][][] */ 45,-26,0,18,28,-43,29,-127,30,-22,-13,114,-77,65,21,-57,1,-94,20,-3,-38,56,-43,-43,-64,81,-22,-2,-20,49,-38,-37,24,54,35,-1,-38,-2,-42,-49,17,-38,-43,-7,-32,59,91,24, 
  /* [6][0][][] */ 51,-24,23,-5,-36,-19,-39,14,-43,6,-46,127,-45,-35,-8,61,10,43,16,30,35,-86,-25,18,21,40,-65,1,9,-42,14,35,8,14,-13,-3,14,2,1,-5,-9,-13,38,59,-4,-32,73,-11, 
  /* [7][0][][] */ -29,-1,-7,65,29,33,10,30,23,3,71,-3,120,107,59,51,50,47,-14,2,23,-21,-91,-26,16,1,-29,66,37,-29,-35,-14,37,7,43,-94,-73,39,40,50,-30,34,83,127,-59,-24,-106,62, 
};
const TfArray<8, float> quant33_scale = { 8, { 0.010475503280758858, 0.0048832953907549381, 0.0065564126707613468, 0.006019695196300745, 0.0074694780632853508, 0.0074603166431188583, 0.010859777219593525, 0.0059107048436999321, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 14248, 4950, 4612, -250, -1170, -2605, -1107, 34478, -824, 2599, 6844, 57855, 433, 6702, 224, 9762, -1757, 13326, -988, 6498, 10557, -196, 3075, -10015, 10580, 1421, 5352, 12766, 740, -817, -11814, 10063, 5188, 1663, -1328, 7168, -10336, 6091, 273, 21996, -2169, -1789, 5497, 3187, 1053, 217, 1794, -76, };
const TfArray<48, float> quant34_scale = { 48, { 9.1350266302470118e-05, 7.8466313425451517e-05, 0.00017431903688702732, 0.00017869392468128353, 0.00072513381019234657, 0.00016003007476683706, 0.00021981469762977213, 8.7368527601938695e-05, 0.0001289781357627362, 9.6355710411444306e-05, 7.3166273068636656e-05, 5.2901759772794321e-05, 8.3889237430412322e-05, 5.6985707487910986e-05, 0.00033189749228768051, 0.00019475196313578635, 0.00014620948059018701, 0.00045101542491465807, 0.00012718891957774758, 0.00014060447574593127, 0.00013785998453386128, 0.00038037795457057655, 0.00010996125638484955, 0.00023964978754520416, 0.00011843739775940776, 0.00011306545638944954, 4.999227894586511e-05, 7.5704250775743276e-05, 0.0001710426586214453, 0.00094231835100799799, 0.00024506365298293531, 9.014748502522707e-05, 0.0001028929473250173, 0.00016683516150806099, 0.000189243393833749, 5.5329241149593145e-05, 6.2990875449031591e-05, 6.2671620980836451e-05, 0.00011276564327999949, 6.3884574046824127e-05, 0.00014846204430796206, 0.00015153500135056674, 7.3547162173781544e-05, 7.6662894571200013e-05, 7.384680793620646e-05, 0.00046343763824552298, 6.2539991631638259e-05, 0.00020053505431860685, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -46,-94,-21,-17,127,-48,70,-72,-85,-83,-21,-51,109,39,60,-127,58,-14,1,-34,-69,110,5,20,-14,67,71,-36,69,-70,29,-49,-95,-80,47,68,25,70,110,-87,-127,-16,35,61,54,-127,93,76, -57,-127,-68,46,-78,103,58,-77,-63,28,67,-106,127,94,114,-82,-75,-73,39,-46,-87,90,-63,105,-94,101,90,-127,83,-50,10,-127,-49,-80,79,122,113,109,126,-68,-122,-58,70,82,83,110,91,68, -6,-72,-76,84,-39,-22,26,-14,80,28,52,-71,33,56,-33,-5,-77,-7,36,-31,-11,34,-101,-1,-75,37,30,-81,28,57,113,-61,21,4,-3,49,83,53,39,8,-11,88,61,32,46,24,15,-122, 
  /* [0][1][][] */ -127,-94,-27,-73,-78,-65,108,-125,-127,-127,92,-74,105,52,-123,-70,127,-127,-59,-82,-65,122,-37,18,-10,95,114,-50,-101,-77,16,-59,-97,-127,-127,62,39,85,12,-104,56,-21,86,111,92,113,122,-127, -126,-125,-127,-95,-32,127,127,-127,96,54,127,-127,115,127,61,-104,56,-99,-127,-127,-127,127,-127,127,-127,127,127,-124,-127,127,-10,-122,-127,-106,57,127,127,127,-1,-127,100,-90,127,127,127,-3,127,117, -62,-56,-126,127,76,-34,56,-28,62,28,26,-55,15,73,68,-40,-18,5,-9,-68,-40,37,-78,-17,-122,48,30,-79,-53,38,127,-79,-60,2,72,79,87,61,-15,-32,49,127,74,25,60,-57,22,29, 
  /* [0][2][][] */ -106,-35,18,32,-32,-16,22,-45,27,-49,24,-41,7,20,-55,-10,-82,-26,111,-30,-9,72,-81,-5,6,46,71,-20,35,54,10,-6,3,-80,-44,29,15,17,-76,-76,34,-7,40,40,33,52,25,-82, -92,-51,-37,-73,96,46,57,-56,102,16,-30,-63,0,37,-127,-66,32,3,66,-62,-45,59,-85,55,-53,58,69,-28,42,4,-23,-44,-78,-25,-70,54,31,35,-127,-104,45,-37,79,68,35,-118,36,-10, -32,-29,-61,-27,-10,-8,23,-17,-66,12,-6,-21,-9,17,27,-24,31,38,5,-45,-35,19,-39,-28,-54,-5,15,-18,12,-64,57,-26,-99,13,25,49,23,27,-60,-42,15,58,15,17,17,-9,11,23, 
};
const TfArray<48, float> quant35_scale = { 48, { 0.0038823862560093403, 0.0033348181750625372, 0.0074085588566958904, 0.007594491820782423, 0.030818186700344086, 0.006801278330385685, 0.0093421246856451035, 0.0037131623830646276, 0.0054815704934298992, 0.004095117561519146, 0.0031095666345208883, 0.0022483246866613626, 0.0035652925726026297, 0.0024218924809247255, 0.014105643145740032, 0.0082769580185413361, 0.0062139024958014488, 0.019168155267834663, 0.00540552893653512, 0.0059756902046501637, 0.0058590495027601719, 0.016166063025593758, 0.0046733533963561058, 0.010185115970671177, 0.0050335894338786602, 0.0048052817583084106, 0.0021246718242764473, 0.0032174305524677038, 0.0072693130932748318, 0.040048528462648392, 0.010415204800665379, 0.0038312680553644896, 0.0043729501776397228, 0.0070904945023357868, 0.0080428440123796463, 0.0023514926433563232, 0.0026771121192723513, 0.002663543913513422, 0.004792539868503809, 0.0027150942478328943, 0.0063096368685364723, 0.0064402371644973755, 0.0031257544178515673, 0.0032581728883087635, 0.0031384893227368593, 0.019696099683642387, 0.0026579496916383505, 0.0085227396339178085, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 959, -363, -359, 1019, 11944, 1545, -403, 3560, 1099, 936, 91, 3306, 1217, 362, -755, 279, 3877, 16274, 2706, -661, 950, -985, -72, 2297, -248, -473, 1441, -3, 3040, 15086, 2185, -4, 350, -123, 2934, -15, 506, -175, 952, 1117, 1871, 1624, 113, -225, 598, 2644, 1435, -202, };
const TfArray<48, float> quant36_scale = { 48, { 0.00054606131743639708, 0.00047910507419146597, 0.00033497874392196536, 0.00039484849548898637, 8.476015500491485e-05, 0.00039456089143641293, 0.00051559106213971972, 0.00024985391064547002, 0.00039245589869096875, 0.00068859127350151539, 0.00043025088962167501, 0.00027557412977330387, 0.00025048720999620855, 0.00047521857777610421, 0.00032564561115577817, 0.00035107211442664266, 0.00019962331862188876, 6.1730577726848423e-05, 0.00026812343276105821, 0.00041408522520214319, 0.00049056002171710134, 0.00021320150699466467, 0.00059806829085573554, 0.00033702130895107985, 0.00052871258230879903, 0.0010410710237920284, 0.00036433321656659245, 0.00090783851919695735, 0.00027788520674221218, 6.3221945310942829e-05, 0.00036034642835147679, 0.00086352752987295389, 0.00051140191499143839, 0.00046267415746115148, 0.00025946384994313121, 0.00047314961557276547, 0.00043881384772248566, 0.00077182246604934335, 0.00050667015602812171, 0.0005639869486913085, 0.00030843904823996127, 0.0003860427241306752, 0.00042021684930659831, 0.000585809291806072, 0.00051002379041165113, 0.00020307034719735384, 0.00027022723224945366, 0.00040889639058150351, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -33,35,3,-23,-72,-36,-127,31, 
  /* [1][0][][] */ 87,-85,-48,-62,127,-90,102,22, 
  /* [2][0][][] */ -109,124,-53,-127,54,-19,-34,48, 
  /* [3][0][][] */ 49,30,100,3,102,127,125,-6, 
  /* [4][0][][] */ -71,-127,62,10,-66,-104,5,-35, 
  /* [5][0][][] */ 127,-26,70,66,-76,-9,-1,-19, 
  /* [6][0][][] */ 25,39,127,-32,51,-41,-46,33, 
  /* [7][0][][] */ 24,5,-127,-29,-42,94,92,-64, 
  /* [8][0][][] */ -20,127,-46,-1,60,104,42,62, 
  /* [9][0][][] */ -12,121,-65,83,22,-95,40,127, 
  /* [10][0][][] */ -2,-118,-3,-25,-72,-127,-62,-78, 
  /* [11][0][][] */ -127,-82,109,50,-10,-74,92,56, 
  /* [12][0][][] */ -25,50,-127,82,35,-64,-87,109, 
  /* [13][0][][] */ 88,-127,92,78,13,26,35,-56, 
  /* [14][0][][] */ -30,106,-40,-127,-38,-113,-29,-70, 
  /* [15][0][][] */ 45,111,38,-16,37,-59,103,-127, 
  /* [16][0][][] */ -118,-127,-61,106,-56,26,-12,82, 
  /* [17][0][][] */ -24,-124,-127,89,-70,77,-51,79, 
  /* [18][0][][] */ -84,-68,-48,87,7,67,3,127, 
  /* [19][0][][] */ 57,-127,104,-119,3,-69,29,-32, 
  /* [20][0][][] */ 1,80,39,15,46,127,72,-12, 
  /* [21][0][][] */ 31,112,50,-35,38,-69,96,-127, 
  /* [22][0][][] */ 16,5,100,12,-7,127,38,-34, 
  /* [23][0][][] */ -103,-71,39,-80,98,116,-63,-127, 
  /* [24][0][][] */ -109,-89,43,-93,113,107,-63,-127, 
  /* [25][0][][] */ 127,13,-58,-13,17,33,-61,-9, 
  /* [26][0][][] */ -127,-32,-127,-28,-50,-37,16,-4, 
  /* [27][0][][] */ 89,38,0,-60,-127,-30,94,94, 
  /* [28][0][][] */ -127,-74,8,59,-80,-99,0,5, 
  /* [29][0][][] */ 114,96,33,-127,32,3,-65,-98, 
  /* [30][0][][] */ -79,-59,44,-71,74,80,-51,-127, 
  /* [31][0][][] */ 58,46,0,127,11,-74,14,10, 
  /* [32][0][][] */ -30,127,-6,35,27,70,-15,47, 
  /* [33][0][][] */ -39,127,-75,29,16,-33,-23,3, 
  /* [34][0][][] */ -127,-112,-47,104,-12,10,16,101, 
  /* [35][0][][] */ -52,127,-33,-2,66,102,54,66, 
  /* [36][0][][] */ 69,23,0,-32,-127,-27,95,106, 
  /* [37][0][][] */ -62,113,28,18,-127,102,-26,-111, 
  /* [38][0][][] */ 43,38,41,18,127,64,103,43, 
  /* [39][0][][] */ -20,-71,46,-21,13,51,-94,127, 
  /* [40][0][][] */ -71,-62,-92,127,-29,-7,18,61, 
  /* [41][0][][] */ 127,9,56,111,-51,-14,-7,-25, 
  /* [42][0][][] */ -40,6,-74,-127,53,-105,7,89, 
  /* [43][0][][] */ 25,-4,87,-5,38,127,95,4, 
  /* [44][0][][] */ -26,-24,-63,127,44,10,-41,-33, 
  /* [45][0][][] */ 72,127,121,-119,50,-58,19,-127, 
  /* [46][0][][] */ -36,-127,-40,28,-6,45,-63,115, 
  /* [47][0][][] */ 38,33,127,4,82,122,126,-23, 
};
const TfArray<48, float> quant37_scale = { 48, { 0.0047659254632890224, 0.0041815433651208878, 0.0029236346017569304, 0.0034461671020835638, 0.00073977146530523896, 0.0034436569549143314, 0.0044999867677688599, 0.0021806803997606039, 0.0034252849873155355, 0.0060099014081060886, 0.0037551529239863157, 0.0024051617365330458, 0.0021862075664103031, 0.0041476227343082428, 0.0028421767055988312, 0.0030640945769846439, 0.0017422765959054232, 0.00053877342725172639, 0.0023401333019137383, 0.0036140617448836565, 0.0042815203778445721, 0.001860784599557519, 0.0052198329940438271, 0.0029414617456495762, 0.0046145091764628887, 0.00908628199249506, 0.0031798351556062698, 0.0079234521836042404, 0.0024253325536847115, 0.00055178982438519597, 0.00314503931440413, 0.0075367139652371407, 0.0044634244404733181, 0.0040381373837590218, 0.0022645541466772556, 0.0041295653209090233, 0.003829888766631484, 0.0067363288253545761, 0.0044221263378858566, 0.0049223774112761021, 0.0026920009404420853, 0.0033693118020892143, 0.0036675776354968548, 0.0051128389313817024, 0.0044513964094221592, 0.0017723616911098361, 0.0023584950249642134, 0.0035687745548784733, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7709, -3916, 12381, -9960, 23527, 6920, -9630, 11671, };
const TfArray<8, float> quant38_scale = { 8, { 0.00019880547188222408, 0.00023202149895951152, 0.00020049001614097506, 0.00026436170446686447, 0.00019041907216887921, 0.00018224406812805682, 0.00018212593568023294, 0.00027374221826903522, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -11,-12,-20,-68,-24,-35,18,-23,38,8,-32,-6,111,127,-17,-100, 
  /* [1][0][][] */ 127,-59,-45,14,-49,70,-67,-45,-39,84,-36,-52,-6,5,-59,-18, 
  /* [2][0][][] */ -40,-95,40,41,48,-59,-75,-17,29,-90,21,-127,41,-22,-75,24, 
  /* [3][0][][] */ 34,10,14,13,-9,69,-50,-20,127,45,8,20,5,-16,8,18, 
  /* [4][0][][] */ -94,-40,-22,-127,-9,35,49,-122,26,-20,-46,-41,-119,30,-41,-20, 
  /* [5][0][][] */ 92,52,68,-24,42,-47,-127,-123,-19,-76,59,46,-60,48,65,-42, 
  /* [6][0][][] */ 100,43,-127,-72,34,-73,7,-85,-36,19,-127,97,96,-92,10,75, 
  /* [7][0][][] */ -127,-2,95,-30,-64,4,-2,-61,-51,61,88,-27,60,-26,33,31, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.008449232205748558, 0.0098609132692217827, 0.0085208257660269737, 0.01123537216335535, 0.0080928103998303413, 0.0077453725971281528, 0.0077403523027896881, 0.011634044349193573, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 17343, -656, 587, 3244, -587, 360, 10093, 1019, -1728, 130, -1928, 3092, -1866, -1137, -336, -1289, };
const TfArray<16, float> quant40_scale = { 16, { 0.00013720107381232083, 0.00022240288672037423, 0.00014685942733194679, 0.00014641010784544051, 0.0013538049533963203, 0.0010700629791244864, 0.00014256707800086588, 0.0011476927902549505, 0.00046596545143984258, 0.0013098724884912372, 0.00023691750539001077, 0.00019932619761675596, 0.00011858362995553762, 0.00022396125132218003, 0.00021773559274151921, 0.00041885941755026579, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,0,3,1,-20,11,11,15,-6,-11,0,-4,-1,-4,4,-2, 7,-1,2,0,14,-2,16,-26,-8,9,-4,90,-7,23,7,-1, 2,-1,-7,-3,2,-14,0,11,0,2,-4,-8,4,-2,-2,-2, 
  /* [0][1][][] */ 13,-5,-1,1,127,-24,-127,-22,127,127,-4,-2,107,-21,-1,-21, -127,127,127,-5,-87,-92,-14,-102,18,-105,127,127,127,127,127,127, 21,-3,-5,-4,-10,127,5,-10,-4,-12,-8,-4,12,-1,-12,-10, 
  /* [0][2][][] */ 3,-3,1,-15,-21,16,57,6,-9,-7,-2,0,-6,4,-3,-12, 26,-14,-4,-127,4,-16,-9,127,-7,1,1,-13,-6,-54,-9,-37, 6,-6,-2,-4,-1,-4,-1,-2,-1,3,-3,-1,2,-3,-7,-13, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0058310455642640591, 0.009452122263610363, 0.0062415255233645439, 0.0062224296852946281, 0.057536710053682327, 0.045477673411369324, 0.0060591008514165878, 0.048776943236589432, 0.019803531467914581, 0.055669579654932022, 0.010068994015455246, 0.0084713632240891457, 0.0050398041494190693, 0.0095183532685041428, 0.0092537626624107361, 0.017801525071263313, } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&g0::quant8_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 2169, 336, 523, 3419, 76356, 66468, 1545, -12414, 9548, -6922, 1865, 184, 4786, -48741, 454, 61274, };
const TfArray<16, float> quant42_scale = { 16, { 0.00023140291159506887, 0.0012572814011946321, 0.0002613260003272444, 0.00017753883730620146, 2.4493998353136703e-05, 2.9947301300126128e-05, 0.00016525964019820094, 2.9237280614324845e-05, 0.00011604623432504013, 3.901682430296205e-05, 0.0005258771707303822, 0.0011050688335672021, 0.00043255643686279655, 1.7766837117960677e-05, 0.00093778135487809777, 4.2804731492651626e-05, } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -30, 
  /* [0][1][][] */ 66, -38, 17, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -95, -79, 
  /* [3][0][][] */ 116, 121, 55, 
  /* [3][1][][] */ -1, -23, -16, 
  /* [3][2][][] */ -102, -127, -45, 
  /* [4][0][][] */ 20, -55, 8, 
  /* [4][1][][] */ 17, -127, 10, 
  /* [4][2][][] */ 7, -89, -10, 
  /* [5][0][][] */ -57, 23, -1, 
  /* [5][1][][] */ -127, 26, 4, 
  /* [5][2][][] */ -87, 20, 2, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -49, 56, -15, 
  /* [6][2][][] */ -34, -50, -87, 
  /* [7][0][][] */ 31, 23, -14, 
  /* [7][1][][] */ 127, 73, -3, 
  /* [7][2][][] */ 32, 8, -20, 
  /* [8][0][][] */ -22, -31, 52, 
  /* [8][1][][] */ -55, -88, 127, 
  /* [8][2][][] */ -27, -63, 96, 
  /* [9][0][][] */ -19, 44, -15, 
  /* [9][1][][] */ -12, 127, -15, 
  /* [9][2][][] */ -6, 88, -9, 
  /* [10][0][][] */ 24, 86, 11, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 11, 39, 17, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 64, -94, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 113, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 80, 23, -1, 
  /* [13][1][][] */ 127, 105, 4, 
  /* [13][2][][] */ 73, 101, 50, 
  /* [14][0][][] */ -31, -28, 48, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -86, -30, 25, 
  /* [15][1][][] */ -123, -127, 26, 
  /* [15][2][][] */ -15, -67, 3, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.059086985886096954, 0.32103732228279114, 0.066727623343467712, 0.045333202928304672, 0.0062543577514588833, 0.0076468172483146191, 0.042197801172733307, 0.0074655190110206604, 0.029631530866026878, 0.0099626518785953522, 0.13427875936031342, 0.28217098116874695, 0.11045002192258835, 0.0045366277918219566, 0.23945538699626923, 0.010929864831268787, } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&g0::quant8_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11457613110542297, } };
const TfArray<1, int> quant46_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.07844620943069458, } };
const TfArray<1, int> quant50_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, float> quant53_scale = { 1, { 0.075157850980758667, } };
const TfArray<1, int> quant53_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, float> quant54_scale = { 1, { 0.093291670083999634, } };
const TfArray<1, int> quant54_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.070708073675632477, } };
const TfArray<1, int> quant58_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.07021147757768631, } };
const TfArray<1, int> quant61_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.084464579820632935, } };
const TfArray<1, int> quant62_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, float> quant65_scale = { 1, { 0.056776896119117737, } };
const TfArray<1, int> quant65_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, float> quant66_scale = { 1, { 0.099239513278007507, } };
const TfArray<1, int> quant66_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.047079566866159439, } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,6 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12820626795291901, } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&g0::quant58_zero, 0 };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension69, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_785545_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_785545_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_785545_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_785545_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_785545_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
